{"version":3,"sources":["flatten.js"],"names":["$array","it","Array","prototype","slice","call","flatten","array","arguments","isArray","toArray","fromArray","constructor","a","b","concat","some","map","reduce","module","exports"],"mappings":"AAAA;;AAWA,IAAIA,SAAS,SAATA,MAAS,CAAUC,EAAV,EAAc;AACzB,SAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,EAA3B,EAA+B,CAA/B,CAAP;AACD,CAFD;;AAWA,SAASK,OAAT,GAAoB;AAClB,MAAIC,QAAQP,OAAOQ,SAAP,CAAZ;AACA,MAAIC,gBAAJ;AACA,MAAIC,gBAAJ;AACA,MAAIC,kBAAJ;;AAEAF,YAAU;AAAA,WAAMR,GAAGW,WAAH,KAAmBV,KAAzB;AAAA,GAAV;AACAQ,YAAU;AAAA,WAAMD,QAAQR,EAAR,IAAcA,EAAd,GAAmB,CAAEA,EAAF,CAAzB;AAAA,GAAV;AACAU,cAAY,mBAACE,CAAD,EAAIC,CAAJ;AAAA,WAAUD,EAAEE,MAAF,CAASD,CAAT,CAAV;AAAA,GAAZ;;AAEA,SAAOP,MAAMS,IAAN,CAAWP,OAAX,CAAP,EAA4B;AAC1BF,YAAQA,MAAMU,GAAN,CAAUP,OAAV,EAAmBQ,MAAnB,CAA0BP,SAA1B,CAAR;AACD;;AAED,SAAOJ,KAAP;AACD;;AAEDY,OAAOC,OAAP,GAAiBd,OAAjB","file":"../flatten.js","sourcesContent":["'use strict';\n\n/**\r\n * Lazy way of turning an item into an Array.\r\n *\r\n * @function array\r\n *\r\n * @param {Object} it - Array like object.\r\n *\r\n * @returns {Array} Implicit array object.\r\n */\nvar $array = function (it) {\n  return Array.prototype.slice.call(it, 0)\n};\n\n/**\r\n * Recursively brings all arguments of arrays to the highest level.\r\n *\r\n * @function flatten\r\n *\r\n * @returns {Array} - Flattened array from the given arguments.\r\n */\nfunction flatten () {\n  let array = $array(arguments);\n  let isArray;\n  let toArray;\n  let fromArray;\n\n  isArray = it => it.constructor === Array;\n  toArray = it => isArray(it) ? it : [ it ];\n  fromArray = (a, b) => a.concat(b);\n\n  while (array.some(isArray)) {\n    array = array.map(toArray).reduce(fromArray);\n  }\n\n  return array\n}\n\nmodule.exports = flatten;\n"]}