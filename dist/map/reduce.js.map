{"version":3,"sources":["reduce.js"],"names":["reducer","previous","current","index","array","self","arguments","nothing","it","isStarting","isStopping","length","checkArray","Array","normalize","result","map","prepare","push","wrap","find","module","exports"],"mappings":"AAAA;;AAEA,SAASA,OAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;AACnC,MAAIC,KAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,IAAJ;;AAEAF,UAAQG,UAAU,CAAV,CAAR;AACAF,UAAQE,UAAU,CAAV,CAAR;AACAD,SAAO,IAAP;;AAEA,MAAIE,UAAU,SAAVA,OAAU;AAAA,WAAMC,EAAN;AAAA,GAAd;AACA,MAAIC,aAAa,SAAbA,UAAa;AAAA,WAAMN,UAAU,CAAhB;AAAA,GAAjB;AACA,MAAIO,aAAa,SAAbA,UAAa;AAAA,WAAMN,MAAMO,MAAN,GAAeR,KAAf,KAAyB,CAA/B;AAAA,GAAjB;AACA,MAAIS,aAAa,SAAbA,UAAa;AAAA,WAAMJ,cAAcK,KAApB;AAAA,GAAjB;;AAEA,MAAIC,YAAY,SAAZA,SAAY,KAAM;AACpB,QAAIC,MAAJ;;AAEAA,aAAS,IAAT;AACAA,aAASA,UAAUN,WAAWD,EAAX,CAAnB;AACAO,aAASA,UAAUH,WAAWJ,EAAX,CAAnB;;AAEA,WAAOO,SAASP,EAAT,GAAc,CAAEH,KAAKW,GAAL,CAASR,EAAT,CAAF,CAArB;AACD,GARD;;AAUAS;;AAEAhB,WAASiB,IAAT,CAAcb,KAAKW,GAAL,CAASd,OAAT,CAAd;;AAEA,SAAOQ,eAAeL,KAAKc,IAAL,CAAUlB,QAAV,CAAf,GAAqCA,QAA5C;;AAEA,WAASgB,OAAT,GAAoB;AAClBhB,eAAWa,UAAUb,QAAV,CAAX;AACA,SAAKkB,IAAL,GAAY,CAAEd,KAAKc,IAAP,EAAaZ,OAAb,EAAuBa,IAAvB,CAA4Bb,OAA5B,CAAZ;AACA,SAAKS,GAAL,GAAW,CAAEX,KAAKW,GAAP,EAAYT,OAAZ,EAAsBa,IAAtB,CAA2Bb,OAA3B,CAAX;AACD;AACF;;AAEDc,OAAOC,OAAP,GAAiBtB,OAAjB","file":"../reduce.js","sourcesContent":["'use strict';\n\nfunction reducer (previous, current) {\n  var index;\n  var array;\n  var self;\n\n  index = arguments[2];\n  array = arguments[3];\n  self = this;\n\n  let nothing = it => it;\n  let isStarting = it => index === 0;\n  let isStopping = it => array.length - index === 1;\n  let checkArray = it => it instanceof Array;\n\n  let normalize = it => {\n    var result;\n\n    result = true;\n    result = result && isStarting(it);\n    result = result && checkArray(it);\n\n    return result ? it : [ self.map(it) ]\n  };\n\n  prepare();\n\n  previous.push(self.map(current));\n\n  return isStopping() ? self.wrap(previous) : previous\n\n  function prepare () {\n    previous = normalize(previous);\n    this.wrap = [ self.wrap, nothing ].find(nothing);\n    this.map = [ self.map, nothing ].find(nothing);\n  }\n}\n\nmodule.exports = reducer;\n"]}