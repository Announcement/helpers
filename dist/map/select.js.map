{"version":3,"sources":["select.js"],"names":["combine","array","values","index","concat","indexOf","undefined","length","shift","$array","it","Array","prototype","slice","call","empty","curry","method","enough","input","missing","some","ready","transform","parameters","inputs","context","results","apply","update","fetch","callback","response","arguments","_where","where","search","object","keys","result","every","key","Object","flatten","isArray","toArray","fromArray","constructor","a","b","map","reduce","select","params","compliant","prepare","normalize","pull","item","forEach","param","merge","reference","ensure","listed","filter","append","query","findIndex","push","reducer","previous","current","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;AAWA,IAAIA,UAAU,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACrC,MAAIC,KAAJ;;AAEAF,UAAQA,MAAMG,MAAN,CAAa,EAAb,CAAR;;AAEA,SAAO,CAACD,QAAQF,MAAMI,OAAN,CAAcC,SAAd,CAAT,MAAuC,CAAC,CAAxC,IAA6CJ,OAAOK,MAAP,GAAgB,CAApE,EAAuE;AACrEN,UAAME,KAAN,IAAeD,OAAOM,KAAP,EAAf;AACD;;AAED,SAAOP,MAAMG,MAAN,CAAaF,MAAb,CAAP;AACD,CAVD;;AAYA;;;;;;;;;AASA,IAAIO,SAAS,UAAUC,EAAV,EAAc;AACzB,SAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,EAA3B,EAA+B,CAA/B,CAAP;AACD,CAFD;;AAIA;;;;;;;;;AASA,IAAIK,QAAQ,UAAUL,EAAV,EAAc;AACxB,SAAOA,OAAOJ,SAAP,IAAoBI,OAAO,IAAlC;AACD,CAFD;;AAIA;;;;;;;;;;;;;AAaA,IAAIM,QAAQ,UAAUC,MAAV,EAAkB;AAC5B,MAAIC,SAASC,SAASA,MAAMZ,MAAN,IAAgBU,OAAOV,MAA7C;AACA,MAAIa,UAAUD,SAASA,MAAME,IAAN,CAAWN,KAAX,CAAvB;AACA,MAAIO,QAAQZ,MAAMQ,OAAOR,EAAP,KAAc,CAACU,QAAQV,EAAR,CAAjC;;AAEA,SAAOO,OAAOV,MAAP,IAAiB,CAAjB,GAAqBU,MAArB,GAA8BM,UAAU;;AAEhD;;;;;;;;;AAFsC,GAArC,CAWA,SAASA,SAAT,CAAoBC,UAApB,EAAgC;AAC9B,QAAIC,MAAJ;AACA,QAAIC,OAAJ;;AAEA,QAAIC,UAAU,MAAMV,OAAOW,KAAP,CAAaF,OAAb,EAAsBD,MAAtB,CAApB;AACA,QAAII,SAASnB,MAAMgB,WAAWhB,EAA9B;AACA,QAAIoB,QAAQpB,MAAM,CAACY,MAAMZ,EAAN,CAAD,GAAaa,UAAUb,EAAV,CAAb,GAA6BiB,SAA/C;;AAEA,WAAOI,QAAP;;AAEA;;;;;;;;;AASA,aAASA,QAAT,CAAmB,GAAGZ,KAAtB,EAA6B;AAC3B,UAAIa,QAAJ;;AAEAP,eAASzB,QAAQwB,UAAR,EAAoBf,OAAOwB,SAAP,CAApB,CAAT;AACAP,gBAAUG,OAAO,IAAP,CAAV;AACAG,iBAAWF,MAAML,MAAN,CAAX;;AAEA,aAAOO,QAAP;AACD;AACF;AACF,CA7CD;;AA+CA,IAAIE,MAAJ;;AAEA;;;;;;;;;;;AAWA,SAASC,KAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,IAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAIC,QAAQC,OAAOL,OAAOK,GAAP,MAAgBJ,OAAOI,GAAP,CAAnC;;AAEAH,SAAOI,OAAOJ,IAAP,CAAYF,MAAZ,CAAP;AACAG,WAASD,KAAKE,KAAL,CAAWA,KAAX,CAAT;;AAEA,SAAOD,MAAP;AACD;;AAEDL,SAASlB,MAAMmB,KAAN,CAAT;;AAEA;;;;;;;AAOA,SAASQ,OAAT,GAAoB;AAClB,MAAI1C,QAAQQ,OAAOwB,SAAP,CAAZ;AACA,MAAIW,OAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,SAAJ;;AAEAF,YAAUlC,MAAMA,GAAGqC,WAAH,KAAmBpC,KAAnC;AACAkC,YAAUnC,MAAMkC,QAAQlC,EAAR,IAAcA,EAAd,GAAmB,CAAEA,EAAF,CAAnC;AACAoC,cAAY,CAACE,CAAD,EAAIC,CAAJ,KAAUD,EAAE5C,MAAF,CAAS6C,CAAT,CAAtB;;AAEA,SAAOhD,MAAMoB,IAAN,CAAWuB,OAAX,CAAP,EAA4B;AAC1B3C,YAAQA,MAAMiD,GAAN,CAAUL,OAAV,EAAmBM,MAAnB,CAA0BL,SAA1B,CAAR;AACD;;AAED,SAAO7C,KAAP;AACD;;AAED;;;;;;;;;;AAUA,SAASmD,MAAT,CAAiB1C,EAAjB,EAAqB;AACnB,MAAI2C,SAASV,QAAQjC,EAAR,EAAYD,OAAOwB,SAAP,CAAZ,CAAb;AACA,MAAIW,UAAUlC,MAAMA,cAAcC,KAAlC;;AAEA,WAAS2C,SAAT,CAAoB5C,EAApB,EAAwB+B,GAAxB,EAA6B;AAC3B,WAAOY,OAAOhD,OAAP,CAAeoC,GAAf,MAAwB,CAAC,CAAzB,GAA6B/B,GAAG+B,GAAH,CAA7B,GAAuC,CAAE/B,GAAG+B,GAAH,CAAF,CAA9C;AACD;;AAED,WAASc,OAAT,CAAkB7C,EAAlB,EAAsB;AACpB,QAAI+B,GAAJ;;AAEA,SAAKA,GAAL,IAAY/B,EAAZ,EAAgB;AACdA,SAAG+B,GAAH,IAAUa,UAAU5C,EAAV,EAAc+B,GAAd,CAAV;AACD;;AAED,WAAO/B,EAAP;AACD;;AAED,WAAS8C,SAAT,CAAoB9C,EAApB,EAAwB;AACtB,QAAI,CAACkC,QAAQlC,EAAR,CAAL,EAAkB;AAChB,aAAO,CAAE6C,QAAQ7C,EAAR,CAAF,CAAP;AACD;;AAED,WAAOA,EAAP;AACD;;AAED,WAAS+C,IAAT,CAAeC,IAAf,EAAqB;AACnB,QAAI1B,QAAJ;;AAEA,QAAI2B,UAAUC,SAAS;AACrB5B,eAAS4B,KAAT,IAAkBF,KAAKE,KAAL,CAAlB;AACD,KAFD;;AAIA5B,eAAW,EAAX;;AAEAqB,WAAOM,OAAP,CAAeA,OAAf;;AAEA,WAAO3B,QAAP;AACD;;AAED,WAAS6B,KAAT,CAAgBC,SAAhB,EAA2BzB,MAA3B,EAAmC;AACjC,QAAIC,IAAJ;;AAEA,QAAIyB,SAAStB,OAAO;AAClBqB,gBAAUrB,GAAV,IAAiBqB,UAAUrB,GAAV,KAAkB,EAAnC;AACD,KAFD;AAGA,QAAIrC,SAASqC,OAAO;AAClBqB,gBAAUrB,GAAV,IAAiBqB,UAAUrB,GAAV,EAAerC,MAAf,CAAsBiC,OAAOI,GAAP,CAAtB,CAAjB;AACD,KAFD;AAGA,QAAIuB,SAASvB,OAAOY,OAAOhD,OAAP,CAAeoC,GAAf,MAAwB,CAAC,CAA7C;;AAEAH,WAAOI,OAAOJ,IAAP,CAAYD,MAAZ,EAAoB4B,MAApB,CAA2BD,MAA3B,CAAP;;AAEA1B,SAAKqB,OAAL,CAAaI,MAAb;AACAzB,SAAKqB,OAAL,CAAavD,MAAb;;AAEA,WAAO0D,SAAP;AACD;;AAED,WAASI,MAAT,CAAiBjE,KAAjB,EAAwByD,IAAxB,EAA8B;AAC5B,QAAIvD,KAAJ;AACA,QAAIgE,KAAJ;AACA,QAAI/B,MAAJ;;AAEA+B,YAAQV,KAAKC,IAAL,CAAR;AACAtB,aAASF,OAAOiC,KAAP,CAAT;AACAhE,YAAQF,MAAMmE,SAAN,CAAgBhC,MAAhB,CAAR;;AAEA,QAAIjC,UAAU,CAAC,CAAf,EAAkB;AAChBF,YAAME,KAAN,IAAe0D,MAAM5D,MAAME,KAAN,CAAN,EAAoBuD,IAApB,CAAf;AACD,KAFD,MAEO;AACLzD,YAAMoE,IAAN,CAAWX,IAAX;AACD;;AAED,WAAOzD,KAAP;AACD;;AAED,WAASqE,OAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;AACnC,QAAIvE,KAAJ;AACA,QAAIyD,IAAJ;;AAEAzD,YAAQuD,UAAUe,QAAV,CAAR;AACAb,WAAOH,QAAQiB,OAAR,CAAP;;AAEAvE,YAAQiE,OAAOjE,KAAP,EAAcyD,IAAd,CAAR;;AAEA,WAAOzD,KAAP;AACD;;AAED,SAAOqE,OAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBtB,MAAjB","file":"../select.js","sourcesContent":["'use strict';\n\n/**\r\n * Appends values to an Array,\r\n * but first replaces undefined values before adding to the end.\r\n *\r\n * @function combine\r\n *\r\n * @param {Array} array - List of existing items.\r\n * @param {Array} values - Proposed additions to the list.\r\n *\r\n * @returns {Array} - Collective array.\r\n */\nvar combine = function (array, values) {\n  let index;\n\n  array = array.concat([]);\n\n  while ((index = array.indexOf(undefined)) !== -1 && values.length > 0) {\n    array[index] = values.shift();\n  }\n\n  return array.concat(values)\n};\n\n/**\r\n * Lazy way of turning an item into an Array.\r\n *\r\n * @function array\r\n *\r\n * @param {Object} it - Array like object.\r\n *\r\n * @returns {Array} Implicit array object.\r\n */\nvar $array = function (it) {\n  return Array.prototype.slice.call(it, 0)\n};\n\n/**\r\n * Check to see if an item is null or undefined.\r\n *\r\n * @function empty\r\n *\r\n * @param {Object} it - The item in question of existance.\r\n *\r\n * @returns {boolean} False, unless it is null or undefiend.\r\n */\nvar empty = function (it) {\n  return it === undefined || it === null\n};\n\n/**\r\n * Returns a modified function with lazy option assocations.\r\n *\r\n * @function curry\r\n *\r\n * @see combine\r\n * @see array\r\n * @see empty\r\n *\r\n * @param {Function} method - Function to be curried.\r\n *\r\n * @returns {Function} Curried functions.\r\n */\nvar curry = function (method) {\n  let enough = input => input.length >= method.length;\n  let missing = input => input.some(empty);\n  let ready = it => enough(it) && !missing(it);\n\n  return method.length <= 1 ? method : transform([])\n\n /**\r\n  * Generated method through currying, allowing chainibility.\r\n  *\r\n  * @function transform\r\n  *\r\n  * @param {Array} parameters - Array of arguments.\r\n  *\r\n  * @returns {(Function|Object)} Intercepted output piped from source curry method.\r\n  */\n  function transform (parameters) {\n    var inputs;\n    var context;\n\n    let results = () => method.apply(context, inputs);\n    let update = it => context || it;\n    let fetch = it => !ready(it) ? transform(it) : results();\n\n    return callback\n\n    /**\r\n     * Interception layer to revert back to transform if data is missing.\r\n     *\r\n     * @function callback\r\n     *\r\n     * @param {...Array} input - All of the variables to be accepted by method.\r\n     *\r\n     * @returns {Object} Output of the source curry method.\r\n     **/\n    function callback (...input) {\n      var response;\n\n      inputs = combine(parameters, $array(arguments));\n      context = update(this);\n      response = fetch(inputs);\n\n      return response\n    }\n  }\n};\n\nvar _where;\n\n/**\r\n * Verifies entry matches. Useful inside of a (filter) pipeline.\r\n *\r\n * @function where\r\n * @version 3.0.0\r\n *\r\n * @param {Object.<string, string>} search - Object with entries to match.\r\n * @param {Object.<string, string>} object - Input item to be tested.\r\n *\r\n * @returns {boolean} True if given entries are the same.\r\n */\nfunction where (search, object) {\n  var keys;\n  var result;\n\n  let every = key => search[key] === object[key];\n\n  keys = Object.keys(search);\n  result = keys.every(every);\n\n  return result\n}\n\n_where = curry(where);\n\n/**\r\n * Recursively brings all arguments of arrays to the highest level.\r\n *\r\n * @function flatten\r\n *\r\n * @returns {Array} - Flattened array from the given arguments.\r\n */\nfunction flatten () {\n  let array = $array(arguments);\n  let isArray;\n  let toArray;\n  let fromArray;\n\n  isArray = it => it.constructor === Array;\n  toArray = it => isArray(it) ? it : [ it ];\n  fromArray = (a, b) => a.concat(b);\n\n  while (array.some(isArray)) {\n    array = array.map(toArray).reduce(fromArray);\n  }\n\n  return array\n}\n\n/**\r\n * Intended to be used with Array.prototype.reduce.\r\n *\r\n * @function select\r\n * @version 3.0.0\r\n *\r\n * @param {...string} it - Property to pull from each object.\r\n *\r\n * @returns {Function} A callback function for reducing objects to similar objects with only specified properties.\r\n */\nfunction select (it) {\n  let params = flatten(it, $array(arguments));\n  let isArray = it => it instanceof Array;\n\n  function compliant (it, key) {\n    return params.indexOf(key) !== -1 ? it[key] : [ it[key] ]\n  }\n\n  function prepare (it) {\n    var key;\n\n    for (key in it) {\n      it[key] = compliant(it, key);\n    }\n\n    return it\n  }\n\n  function normalize (it) {\n    if (!isArray(it)) {\n      return [ prepare(it) ]\n    }\n\n    return it\n  }\n\n  function pull (item) {\n    var response;\n\n    let forEach = param => {\n      response[param] = item[param];\n    };\n\n    response = {};\n\n    params.forEach(forEach);\n\n    return response\n  }\n\n  function merge (reference, object) {\n    var keys;\n\n    let ensure = key => {\n      reference[key] = reference[key] || [];\n    };\n    let concat = key => {\n      reference[key] = reference[key].concat(object[key]);\n    };\n    let listed = key => params.indexOf(key) === -1;\n\n    keys = Object.keys(object).filter(listed);\n\n    keys.forEach(ensure);\n    keys.forEach(concat);\n\n    return reference\n  }\n\n  function append (array, item) {\n    var index;\n    var query;\n    var search;\n\n    query = pull(item);\n    search = _where(query);\n    index = array.findIndex(search);\n\n    if (index !== -1) {\n      array[index] = merge(array[index], item);\n    } else {\n      array.push(item);\n    }\n\n    return array\n  }\n\n  function reducer (previous, current) {\n    var array;\n    var item;\n\n    array = normalize(previous);\n    item = prepare(current);\n\n    array = append(array, item);\n\n    return array\n  }\n\n  return reducer\n}\n\nmodule.exports = select;\n"]}