{"version":3,"sources":["loop.js"],"names":[],"mappings":"AAAA","file":"../dist/loop.min.js","sourcesContent":["'use strict';\n\n// // import decompose from './decompose'\n//\n// function single (list) {\r\n//   var result\r\n//   var length\r\n//\r\n//   length = list.length\r\n//   result = length === 1 ? list.shift() : list\r\n//\r\n//   return result\r\n// }\n//\n// function array (it) {\r\n//   return Array.prototype.slice.call(it, 0)\r\n// }\n//\n// function attempt (mutation, subject) {\r\n//   let parameters\r\n//   let alternative\r\n//   let response\r\n//\r\n//   parameters = array(arguments).slice(1)\r\n//   alternative = single(parameters)\r\n//\r\n//   response = mutation.apply(this, parameters)\r\n//\r\n//   return response || alternative\r\n// }\n//\n// function decompose (array, initial) {\r\n//   let composer = (previous, current) => attempt(current, previous)\r\n//   let reducer = (it) => array.reduce(composer, initial || it)\r\n//\r\n//   return initial ? reducer(initial) : reducer\r\n// }\n//\n// let isArray = (it) => it.constructor === Array\r\n// let isObject = (it) => it.constructor === Object\n//\n// function generate (it) {\n//   return isArray(it) ? [] : isObject(it) && {}\n// }\n//\n// function prepare (it) {\n//   return isArray(it) ? it : isObject(it) && Object.keys(it)\n// }\n//\n// /**\n//  *\n//  */\r\n// function loop (object) {\r\n//   var results\n//   var items\n//   var cache\n//\n//   results = generate(object)\n//   items = prepare(object)\n//\n//   cache = items.map(mapper)\n//\n//   function mapper (value, index) {\n//     return isObject(object) && {key: value, input: object[value]} ||\n//       isArray(object) && {key: index, input: value}\n//   }\n//\n//   function respond (callback) {\n//     return function (it) {\n//       it.response = callback(it.input, it.key, object)\n//       return it\n//     }\n//   }\n//\n//   function filterProperty (property) {\n//     return function (it) {\n//       return it[property]\n//     }\n//   }\n//\n//   function map (callback) {\n//     cache.map(respond(callback)).forEach(forEach)\n//\n//     return results\r\n//\r\n//     function forEach (it) {\n//       results[it.key] = it.response\n//     }\n//   }\n//\n//   function search (callback) {\n//     cache\n//       .map(respond(callback))\n//       .filter()\n//   }\n//\n//   function filter (callback) {\n//     cache\n//       .map(respond(callback))\n//       .filter(filterProperty('response'))\n//       .map(rebase)\n//       .forEach(forEach)\n//\n//     return results\n//\n//     function rebase (it, index) {\n//       if (isArray(object)) {\n//         it.index = index\n//       }\n//\n//       return it\n//     }\n//\n//     function forEach (it) {\n//       results[it.key] = it.value\n//     }\n//   }\r\n//\r\n//   function get (property) {\r\n//     return function (it) {\r\n//       return it[property]\r\n//     }\r\n//   }\r\n//\r\n//   function every (callback) {\r\n//     return cache\r\n//       .map(respond(callback))\r\n//       .every(get('response'))\r\n//   }\r\n//\r\n//   function some (callback) {\r\n//     return cache\r\n//       .map(respond(callback))\r\n//       .some(get('response'))\r\n//   }\r\n//\r\n//   // find\r\n//   // findIndex\r\n//   // indexOf\r\n//   // lastIndexOf\r\n//\r\n//   return {\r\n//     map,\r\n//     filter,\r\n//     some,\r\n//     every,\r\n//     search\r\n//   }\r\n// }\n//\n// loop({'foo': 'fizz', 'bar': 'buzz'}).map(function (it) { console.log(it) })\n// loop(['foo', 'bar']).map(function (it) { console.log(it) })\n//\r\n// export {loop as default}\n"]}