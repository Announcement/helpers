{"version":3,"sources":["crawler.js"],"names":["first","array","filter","input","output","find","value","index","isArray","it","constructor","Array","isObject","Object","map","callback","object","assign","key","decompose","processors","each","test","item","console","log","unit","Crawler","method","cache","indexOf","push","render","response","genericProcessor","result","name","flat","process","bind","module","exports"],"mappings":"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","file":"../crawler.js","sourcesContent":["'use strict';\n\n/**\r\n  * finds the first item that passes a given test, and the results of said test\r\n  * @method first\r\n  *\r\n  * @param {Array} array\r\n  * @param {Function} filter\r\n  *\r\n  * return {Object.<input, output>}\r\n  **/\r\nfunction first(array, filter) {\r\n  var input;\r\n  var output;\r\n\r\n  array.find((value, index, array) => {\r\n    input = value;\r\n    output = filter(value, index, array);\r\n\r\n    return output\r\n  });\r\n\r\n  return { input, output }\r\n}\n\n// import exists from './exists'\r\n// import {forEach} from './loop'\r\n\r\nlet isArray = it => it.constructor === Array;\r\nlet isObject = it => it.constructor === Object;\r\n\r\nlet map = (it, callback) => {\r\n  const object = Object.assign({}, it);\r\n\r\n  for (let [key, value] of object) {\r\n    object[key] = {\r\n      input: value,\r\n      output: callback(value, key, it)\r\n    };\r\n  }\r\n\r\n  return object\r\n};\r\n\r\nfunction decompose(processors, input) {\r\n  let each = it => it.test(input);\r\n  let item = first(processors, each);\r\n\r\n  console.log(item);\r\n\r\n  return !item ? input : item.input.unit(input)\r\n}\r\n\r\nclass Crawler {\r\n  constructor(method) {\r\n    this.method = method;\r\n    this.cache = [];\r\n  }\r\n\r\n  unique(value) {\r\n    let cache = this.cache;\r\n\r\n    if (cache.indexOf(value) !== -1) {\r\n      return false\r\n    }\r\n\r\n    cache.push(value);\r\n    return true\r\n  }\r\n\r\n  flat(it, callback) {\r\n    // const unique = this.unique.bind(this)\r\n\r\n    let render = (value, key, object) => {\r\n      let response = callback(value, key, object);\r\n      console.log(response);\r\n      return response\r\n      // results.push(result)?\r\n    };\r\n\r\n    let genericProcessor = it => {\r\n      let result = map(it)(render);\r\n      console.log('render processor', result);\r\n      return result\r\n    };\r\n\r\n    let processors = [\r\n      { name: 'array', test: isArray, unit: genericProcessor },\r\n      { name: 'object', test: isObject, unit: genericProcessor }\r\n    ];\r\n\r\n    let response = decompose(processors, it);\r\n    return response\r\n  }\r\n\r\n  process(object, callback) {\r\n    let genericProcessor = it => {\r\n      return this.flat(it, this.process.bind(this))\r\n    };\r\n\r\n    let processors = [\r\n      { name: 'array', test: isArray, unit: genericProcessor },\r\n      { name: 'object', test: isObject, unit: genericProcessor }\r\n    ];\r\n\r\n    let response = decompose(processors, object);\r\n\r\n    console.log(response);\r\n\r\n    return response\r\n  }\r\n\r\n  descend(it) {\r\n    const method = this.method;\r\n    const process = this.process.bind(this);\r\n\r\n    process(it, method);\r\n  }\r\n}\n\nmodule.exports = Crawler;\n"]}