{"version":3,"sources":["crawler.js"],"names":["first","array","filter","input","output","find","value","index","decompose","processors","item","it","test","console","log","unit","isArray","constructor","Array","isObject","Object","map","callback","_iteratorError","object","assign","_iteratorNormalCompletion","_didIteratorError","_step","_iterator","Symbol","iterator","next","done","_ref","_ref2","_slicedToArray","key","err","return","Crawler","method","_classCallCheck","this","cache","indexOf","push","render","response","genericProcessor","result","name","_this","flat","process","bind","module","exports"],"mappings":"AAAA,yHAWA,SAASA,MAAOC,EAAOC,GACrB,IAAIC,EACAC,EASJ,OAPAH,EAAMI,KAAK,SAACC,EAAOC,EAAON,GAIxB,OAHAE,EAAQG,EACRF,EAASF,EAAOI,EAAOC,EAAON,MAKxBE,MAAAA,EAAOC,OAAAA,GAsBjB,SAASI,UAAWC,EAAYN,GAC9B,IACIO,EAAOV,MAAMS,EADN,SAAAE,GAAA,OAAMA,EAAGC,KAAKT,KAKzB,OAFAU,QAAQC,IAAIJ,GAEJA,EAAeA,EAAKP,MAAMY,KAAKZ,GAAxBA,krBAtBba,QAAU,SAACL,GAAD,OAAQA,EAAGM,cAAgBC,OACrCC,SAAW,SAACR,GAAD,OAAQA,EAAGM,cAAgBG,QAEtCC,IAAM,SAACV,EAAIW,GACb,IAD0BC,EACpBC,EAASJ,OAAOK,UAAWd,GADPe,GAAA,EAAAC,GAAA,EAAA,IAG1B,IAAA,IAAAC,EAAAC,EAAyBL,EAAzBM,OAAAC,cAAAL,GAAAE,EAAAC,EAAAG,QAAAC,MAAAP,GAAA,EAAiC,CAAA,IAAAQ,EAAAN,EAAAtB,MAAA6B,EAAAC,eAAAF,EAAA,GAAvBG,EAAuBF,EAAA,GAAlB7B,EAAkB6B,EAAA,GAC/BX,EAAOa,IACLlC,MAAOG,EACPF,OAAQkB,EAAShB,EAAO+B,EAAK1B,KANP,MAAA2B,GAAAX,GAAA,EAAAJ,EAAAe,EAAA,QAAA,KAAAZ,GAAAG,EAAAU,QAAAV,EAAAU,SAAA,QAAA,GAAAZ,EAAA,MAAAJ,GAU1B,OAAOC,GAYHgB,mBACJ,SAAAA,EAAaC,GAAQC,gBAAAC,KAAAH,GACnBG,KAAKF,OAASA,EACdE,KAAKC,6DAGCtC,GACN,IAAIsC,EAAQD,KAAKC,MAEjB,OAA8B,IAA1BA,EAAMC,QAAQvC,KAIlBsC,EAAME,KAAKxC,IACJ,gCAGHK,EAAIW,GAGR,IAAIyB,EAAS,SAACzC,EAAO+B,EAAKb,GACxB,IAAIwB,EAAW1B,EAAShB,EAAO+B,EAAKb,GAEpC,OADAX,QAAQC,IAAIkC,GACLA,GAILC,EAAmB,SAACtC,GACtB,IAAIuC,EAAS7B,IAAIV,GAAIoC,GAErB,OADAlC,QAAQC,IAAI,mBAAoBoC,GACzBA,GAST,OADe1C,YAJZ2C,KAAM,QAASvC,KAAMI,QAASD,KAAMkC,IACpCE,KAAM,SAAUvC,KAAMO,SAAUJ,KAAMkC,IAGJtC,mCAI9Ba,EAAQF,GAAU,IAAA8B,EAAAT,KACrBM,EAAmB,SAAAtC,GACrB,OAAOyC,EAAKC,KAAK1C,EAAIyC,EAAKE,QAAQC,KAAbH,KAQnBJ,EAAWxC,YAJZ2C,KAAM,QAASvC,KAAMI,QAASD,KAAMkC,IACpCE,KAAM,SAAUvC,KAAMO,SAAUJ,KAAMkC,IAGJzB,GAIrC,OAFAX,QAAQC,IAAIkC,GAELA,kCAGArC,GACP,IAAM8B,EAASE,KAAKF,OACJE,KAAKW,QAAQC,KAAKZ,MAE1BhC,EAAI8B,YAIhBe,OAAOC,QAAUjB","file":"../dist/crawler.min.js","sourcesContent":["'use strict';\n\n/**\r\n  * finds the first item that passes a given test, and the results of said test\r\n  * @method first\r\n  *\r\n  * @param {Array} array\r\n  * @param {Function} filter\r\n  *\r\n  * return {Object.<input, output>}\r\n  **/\r\nfunction first (array, filter) {\r\n  var input;\r\n  var output;\r\n\r\n  array.find((value, index, array) => {\r\n    input = value;\r\n    output = filter(value, index, array);\r\n\r\n    return output\r\n  });\r\n\r\n  return {input, output}\r\n}\n\n// import exists from './exists'\r\n// import {forEach} from './loop'\r\n\r\nlet isArray = (it) => it.constructor === Array;\r\nlet isObject = (it) => it.constructor === Object;\r\n\r\nlet map = (it, callback) => {\r\n  const object = Object.assign({}, it);\r\n\r\n  for (let [key, value] of object) {\r\n    object[key] = {\r\n      input: value,\r\n      output: callback(value, key, it)\r\n    };\r\n  }\r\n\r\n  return object\r\n};\r\n\r\nfunction decompose (processors, input) {\r\n  let each = it => it.test(input);\r\n  let item = first(processors, each);\r\n\r\n  console.log(item);\r\n\r\n  return !item ? input : item.input.unit(input)\r\n}\r\n\r\nclass Crawler {\r\n  constructor (method) {\r\n    this.method = method;\r\n    this.cache = [];\r\n  }\r\n\r\n  unique (value) {\r\n    let cache = this.cache;\r\n\r\n    if (cache.indexOf(value) !== -1) {\r\n      return false\r\n    }\r\n\r\n    cache.push(value);\r\n    return true\r\n  }\r\n\r\n  flat (it, callback) {\r\n    // const unique = this.unique.bind(this)\r\n\r\n    let render = (value, key, object) => {\r\n      let response = callback(value, key, object);\r\n      console.log(response);\r\n      return response\r\n      // results.push(result)?\r\n    };\r\n\r\n    let genericProcessor = (it) => {\r\n      let result = map(it)(render);\r\n      console.log('render processor', result);\r\n      return result\r\n    };\r\n\r\n    let processors = [\r\n      {name: 'array', test: isArray, unit: genericProcessor},\r\n      {name: 'object', test: isObject, unit: genericProcessor}\r\n    ];\r\n\r\n    let response = decompose(processors, it);\r\n    return response\r\n  }\r\n\r\n  process (object, callback) {\r\n    let genericProcessor = it => {\r\n      return this.flat(it, this.process.bind(this))\r\n    };\r\n\r\n    let processors = [\r\n      {name: 'array', test: isArray, unit: genericProcessor},\r\n      {name: 'object', test: isObject, unit: genericProcessor}\r\n    ];\r\n\r\n    let response = decompose(processors, object);\r\n\r\n    console.log(response);\r\n\r\n    return response\r\n  }\r\n\r\n  descend (it) {\r\n    const method = this.method;\r\n    const process = this.process.bind(this);\r\n\r\n    process(it, method);\r\n  }\r\n}\n\nmodule.exports = Crawler;\n"]}