{"version":3,"sources":["inject.js"],"names":["array","it","Array","prototype","slice","call","single","list","result","isArray","alone","length","shift","exists","undefined","attempt","mutation","subject","parameters","apply","method","valid","arguments","inject","transform","copy","keys","isObject","constructor","name","isFunction","forObject","forFunction","Object","forEach","key","value","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;;;AASA,IAAIA,QAAQ,UAAUC,EAAV,EAAc;AACxB,SAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,EAA3B,EAA+B,CAA/B,CAAP;AACD,CAFD;;AAIA;;;;;;;;;AASA,SAASK,MAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIC,MAAJ;;AAEA,MAAIC,UAAWR,EAAD,IAAQ,OAAOA,EAAP,KAAc,QAAd,IAA0BA,cAAcC,KAA9D;AACA,MAAIQ,QAAQT,MAAMQ,QAAQR,EAAR,KAAeA,GAAGU,MAAH,KAAc,CAA/C;;AAEAH,WAASE,MAAMH,IAAN,IAAcA,KAAKK,KAAL,EAAd,GAA6BL,IAAtC;;AAEA,SAAOC,MAAP;AACD;;AAED;;;;;;;;;AASA,SAASK,MAAT,CAAiBZ,EAAjB,EAAqB;AACnB,SAAOA,OAAOa,SAAP,IAAoBb,OAAO,IAAlC;AACD;;AAED;;;;;;;;;;;;;;AAcA,IAAIc,UAAU,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AACzC,MAAIC,UAAJ;AACA,MAAIV,MAAJ;;AAEA,MAAIW,QAAQ,CAACC,MAAD,EAASF,UAAT,KAAwBE,OAAOD,KAAP,CAAa,IAAb,EAAmBD,UAAnB,CAApC;AACA,MAAIG,QAAQpB,MAAMY,OAAOZ,EAAP,KAAcK,OAAOL,EAAP,CAAhC;;AAEAiB,eAAalB,MAAMsB,SAAN,EAAiBlB,KAAjB,CAAuB,CAAvB,CAAb;AACAI,WAASW,MAAMH,QAAN,EAAgBE,UAAhB,CAAT;;AAEA,SAAOG,MAAMb,MAAN,KAAiBa,MAAMH,UAAN,CAAxB;AACD,CAXD;;AAaA;;;;;;;;;;;;AAYA,SAASK,MAAT,CAAiBtB,EAAjB,EAAqBuB,SAArB,EAAgC;AAC9B,MAAIC,IAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIC,WAAW1B,MACb,OAAOA,EAAP,KAAc,QAAd,IAA0BA,GAAG2B,WAAH,CAAeC,IAAf,KAAwB,QADpD;;AAGA,MAAIC,aAAa7B,MACf,OAAOA,EAAP,KAAc,UAAd,IAA4BA,GAAG2B,WAAH,CAAeC,IAAf,KAAwB,UADtD;;AAGA,MAAIE,YAAY9B,MACd0B,SAAS1B,EAAT,KAAgBsB,OAAOtB,EAAP,EAAWuB,SAAX,CADlB;;AAGA,MAAIQ,cAAc/B,MAChB6B,WAAW7B,EAAX,KAAkBc,QAAQS,SAAR,EAAmBvB,EAAnB,CADpB;;AAGAyB,SAAOO,OAAOP,IAAP,CAAYzB,EAAZ,CAAP;AACAwB,SAAO,EAAP;;AAEAC,OAAKQ,OAAL,CAAaA,OAAb;;AAEA,SAAOT,IAAP;;AAEA,WAASS,OAAT,CAAkBC,GAAlB,EAAuB;AACrB,QAAIC,KAAJ;;AAEAA,YAAQnC,GAAGkC,GAAH,CAAR;;AAEAC,YAAQrB,QAAQgB,SAAR,EAAmBK,KAAnB,CAAR;AACAA,YAAQrB,QAAQiB,WAAR,EAAqBI,KAArB,CAAR;;AAEAX,SAAKU,GAAL,IAAYC,KAAZ;AACD;AACF;;AAEDC,OAAOC,OAAP,GAAiBf,MAAjB","file":"../inject.js","sourcesContent":["'use strict';\n\n/**\r\n * Lazy way of turning an item into an Array.\r\n *\r\n * @function array\r\n *\r\n * @param {Object} it - Array like object.\r\n *\r\n * @returns {Array} Implicit array object.\r\n */\nvar array = function (it) {\n  return Array.prototype.slice.call(it, 0)\n};\n\n/**\r\n * Dismantles unnecissary lists.\r\n *\r\n * @function single\r\n *\r\n * @param {Array} list - List of items.\r\n *\r\n * @returns {Array|Object} The only item or entire list.\r\n */\nfunction single (list) {\n  var result;\n\n  let isArray = (it) => typeof it === 'object' && it instanceof Array;\n  let alone = it => isArray(it) && it.length === 1;\n\n  result = alone(list) ? list.shift() : list;\n\n  return result\n}\n\n/**\r\n * Checks to see if an item exists.\r\n *\r\n * @function exists\r\n *\r\n * @param {Object} it - The item in question of existance.\r\n *\r\n * @returns {boolean} True, unless it is null or undefined.\r\n */\nfunction exists (it) {\n  return it !== undefined && it !== null\n}\n\n/**\r\n * Attempts to apply mutation to subject.\r\n *\r\n * @function attempt\r\n *\r\n * @see array\r\n * @see single\r\n * @see exists\r\n *\r\n * @param {Function} mutation - Mutator function to be called on the subject.\r\n * @param {Object} subject - Any input that should be mutated.\r\n *\r\n * @returns {Object} Subject unless mutation can be applied.\r\n */\nvar attempt = function (mutation, subject) {\n  var parameters;\n  var result;\n\n  let apply = (method, parameters) => method.apply(this, parameters);\n  let valid = it => exists(it) && single(it);\n\n  parameters = array(arguments).slice(1);\n  result = apply(mutation, parameters);\n\n  return valid(result) || valid(parameters)\n};\n\n/**\n * Injects a transformer into each element of a collection.\n *\n * @function inject\n *\n * @see attempt\n *\n * @param {Object.<string, Function>} it - Collection of functions.\n * @param {Function} transform - Mutator function to run through each of the functions in it.\n *\n * @returns {Object.<string, Function>} All it functions, but mutated via transform.\n */\nfunction inject (it, transform) {\n  var copy;\n  var keys;\n\n  let isObject = it =>\n    typeof it === 'object' && it.constructor.name === 'Object';\n\n  let isFunction = it =>\n    typeof it === 'function' && it.constructor.name === 'Function';\n\n  let forObject = it =>\n    isObject(it) && inject(it, transform);\n\n  let forFunction = it =>\n    isFunction(it) && attempt(transform, it);\n\n  keys = Object.keys(it);\n  copy = {};\n\n  keys.forEach(forEach);\n\n  return copy\n\n  function forEach (key) {\n    var value;\n\n    value = it[key];\n\n    value = attempt(forObject, value);\n    value = attempt(forFunction, value);\n\n    copy[key] = value;\n  }\n}\n\nmodule.exports = inject;\n"]}