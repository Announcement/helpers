{"version":3,"sources":["unique.js"],"names":["combine","array","values","index","concat","indexOf","undefined","length","shift","it","Array","prototype","slice","call","empty","curry","method","enough","input","missing","some","ready","transform","parameters","inputs","context","results","apply","update","fetch","callback","response","arguments","_where","where","search","object","keys","result","every","key","Object","unique","normal","value","filter","reduce","previous","current","beforeReduce","find","push","module","exports"],"mappings":"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","file":"../unique.js","sourcesContent":["'use strict';\n\n/**\r\n * Appends values to an Array,\r\n * but first replaces undefined values before adding to the end.\r\n *\r\n * @function combine\r\n *\r\n * @param {Array} array - List of existing items.\r\n * @param {Array} values - Proposed additions to the list.\r\n *\r\n * @returns {Array} - Collective array.\r\n */\nvar combine = function (array, values) {\n  let index;\n\n  array = array.concat([]);\n\n  while ((index = array.indexOf(undefined)) !== -1 && values.length > 0) {\n    array[index] = values.shift();\n  }\n\n  return array.concat(values)\n};\n\n/**\r\n * Lazy way of turning an item into an Array.\r\n *\r\n * @function array\r\n *\r\n * @param {Object} it - Array like object.\r\n *\r\n * @returns {Array} Implicit array object.\r\n */\nvar array = function (it) {\n  return Array.prototype.slice.call(it, 0)\n};\n\n/**\r\n * Check to see if an item is null or undefined.\r\n *\r\n * @function empty\r\n *\r\n * @param {Object} it - The item in question of existance.\r\n *\r\n * @returns {boolean} False, unless it is null or undefiend.\r\n */\nvar empty = function (it) {\n  return it === undefined || it === null\n};\n\n/**\r\n * Returns a modified function with lazy option assocations.\r\n *\r\n * @function curry\r\n *\r\n * @see combine\r\n * @see array\r\n * @see empty\r\n *\r\n * @param {Function} method - Function to be curried.\r\n *\r\n * @returns {Function} Curried functions.\r\n */\nvar curry = function (method) {\n  let enough = input => input.length >= method.length;\n  let missing = input => input.some(empty);\n  let ready = it => enough(it) && !missing(it);\n\n  return method.length <= 1 ? method : transform([])\n\n /**\r\n  * Generated method through currying, allowing chainibility.\r\n  *\r\n  * @function transform\r\n  *\r\n  * @param {Array} parameters - Array of arguments.\r\n  *\r\n  * @returns {(Function|Object)} Intercepted output piped from source curry method.\r\n  */\n  function transform (parameters) {\n    var inputs;\n    var context;\n\n    let results = () => method.apply(context, inputs);\n    let update = it => context || it;\n    let fetch = it => !ready(it) ? transform(it) : results();\n\n    return callback\n\n    /**\r\n     * Interception layer to revert back to transform if data is missing.\r\n     *\r\n     * @function callback\r\n     *\r\n     * @param {...Array} input - All of the variables to be accepted by method.\r\n     *\r\n     * @returns {Object} Output of the source curry method.\r\n     **/\n    function callback (...input) {\n      var response;\n\n      inputs = combine(parameters, array(arguments));\n      context = update(this);\n      response = fetch(inputs);\n\n      return response\n    }\n  }\n};\n\nvar _where;\n\n/**\r\n * Verifies entry matches. Useful inside of a (filter) pipeline.\r\n *\r\n * @function where\r\n * @version 3.0.0\r\n *\r\n * @param {Object.<string, string>} search - Object with entries to match.\r\n * @param {Object.<string, string>} object - Input item to be tested.\r\n *\r\n * @returns {boolean} True if given entries are the same.\r\n */\nfunction where (search, object) {\n  var keys;\n  var result;\n\n  let every = key => search[key] === object[key];\n\n  keys = Object.keys(search);\n  result = keys.every(every);\n\n  return result\n}\n\n_where = curry(where);\n\n// normal is the most convenient implementation\n// filter is the most efficient implementation\n// reduce is the most reliable implementation\n\nvar unique = {\n  normal: curry(function normal (array, value) {\n    return array.filter(_where(value)).length > 1\n  }),\n  filter: function filter (value, index, array) {\n    return array.indexOf(value, index + 1) === -1\n  },\n  reduce: function reduce (previous, current) {\n    let beforeReduce = it => it instanceof Array ? it : [ it ];\n\n    previous = beforeReduce(previous);\n\n    if (!previous.find(_where(current))) {\n      previous.push(current);\n    }\n\n    return previous\n  }\n};\n\nmodule.exports = unique;\n"]}