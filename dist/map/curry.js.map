{"version":3,"sources":["curry.js"],"names":["combine","array","values","index","concat","indexOf","undefined","length","shift","it","Array","prototype","slice","call","empty","curry","method","enough","input","missing","some","ready","transform","parameters","inputs","context","results","apply","update","fetch","callback","response","arguments","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;AAWA,IAAIA,UAAU,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACrC,MAAIC,KAAJ;;AAEAF,UAAQA,MAAMG,MAAN,CAAa,EAAb,CAAR;;AAEA,SAAO,CAACD,QAAQF,MAAMI,OAAN,CAAcC,SAAd,CAAT,MAAuC,CAAC,CAAxC,IAA6CJ,OAAOK,MAAP,GAAgB,CAApE,EAAuE;AACrEN,UAAME,KAAN,IAAeD,OAAOM,KAAP,EAAf;AACD;;AAED,SAAOP,MAAMG,MAAN,CAAaF,MAAb,CAAP;AACD,CAVD;;AAYA;;;;;;;;;AASA,IAAID,QAAQ,UAAUQ,EAAV,EAAc;AACxB,SAAOC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,EAA3B,EAA+B,CAA/B,CAAP;AACD,CAFD;;AAIA;;;;;;;;;AASA,IAAIK,QAAQ,UAAUL,EAAV,EAAc;AACxB,SAAOA,OAAOH,SAAP,IAAoBG,OAAO,IAAlC;AACD,CAFD;;AAIA;;;;;;;;;;;;;AAaA,IAAIM,QAAQ,UAAUC,MAAV,EAAkB;AAC5B,MAAIC,SAASC,SAASA,MAAMX,MAAN,IAAgBS,OAAOT,MAA7C;AACA,MAAIY,UAAUD,SAASA,MAAME,IAAN,CAAWN,KAAX,CAAvB;AACA,MAAIO,QAAQZ,MAAMQ,OAAOR,EAAP,KAAc,CAACU,QAAQV,EAAR,CAAjC;;AAEA,SAAOO,OAAOT,MAAP,IAAiB,CAAjB,GAAqBS,MAArB,GAA8BM,UAAU;;AAEhD;;;;;;;;;AAFsC,GAArC,CAWA,SAASA,SAAT,CAAoBC,UAApB,EAAgC;AAC9B,QAAIC,MAAJ;AACA,QAAIC,OAAJ;;AAEA,QAAIC,UAAU,MAAMV,OAAOW,KAAP,CAAaF,OAAb,EAAsBD,MAAtB,CAApB;AACA,QAAII,SAASnB,MAAMgB,WAAWhB,EAA9B;AACA,QAAIoB,QAAQpB,MAAM,CAACY,MAAMZ,EAAN,CAAD,GAAaa,UAAUb,EAAV,CAAb,GAA6BiB,SAA/C;;AAEA,WAAOI,QAAP;;AAEA;;;;;;;;;AASA,aAASA,QAAT,CAAmB,GAAGZ,KAAtB,EAA6B;AAC3B,UAAIa,QAAJ;;AAEAP,eAASxB,QAAQuB,UAAR,EAAoBtB,MAAM+B,SAAN,CAApB,CAAT;AACAP,gBAAUG,OAAO,IAAP,CAAV;AACAG,iBAAWF,MAAML,MAAN,CAAX;;AAEA,aAAOO,QAAP;AACD;AACF;AACF,CA7CD;;AA+CAE,OAAOC,OAAP,GAAiBnB,KAAjB","file":"../curry.js","sourcesContent":["'use strict';\n\n/**\r\n * Appends values to an Array,\r\n * but first replaces undefined values before adding to the end.\r\n *\r\n * @function combine\r\n *\r\n * @param {Array} array - List of existing items.\r\n * @param {Array} values - Proposed additions to the list.\r\n *\r\n * @returns {Array} - Collective array.\r\n */\nvar combine = function (array, values) {\n  let index;\n\n  array = array.concat([]);\n\n  while ((index = array.indexOf(undefined)) !== -1 && values.length > 0) {\n    array[index] = values.shift();\n  }\n\n  return array.concat(values)\n};\n\n/**\r\n * Lazy way of turning an item into an Array.\r\n *\r\n * @function array\r\n *\r\n * @param {Object} it - Array like object.\r\n *\r\n * @returns {Array} Implicit array object.\r\n */\nvar array = function (it) {\n  return Array.prototype.slice.call(it, 0)\n};\n\n/**\r\n * Check to see if an item is null or undefined.\r\n *\r\n * @function empty\r\n *\r\n * @param {Object} it - The item in question of existance.\r\n *\r\n * @returns {boolean} False, unless it is null or undefiend.\r\n */\nvar empty = function (it) {\n  return it === undefined || it === null\n};\n\n/**\r\n * Returns a modified function with lazy option assocations.\r\n *\r\n * @function curry\r\n *\r\n * @see combine\r\n * @see array\r\n * @see empty\r\n *\r\n * @param {Function} method - Function to be curried.\r\n *\r\n * @returns {Function} Curried functions.\r\n */\nvar curry = function (method) {\n  let enough = input => input.length >= method.length;\n  let missing = input => input.some(empty);\n  let ready = it => enough(it) && !missing(it);\n\n  return method.length <= 1 ? method : transform([])\n\n /**\r\n  * Generated method through currying, allowing chainibility.\r\n  *\r\n  * @function transform\r\n  *\r\n  * @param {Array} parameters - Array of arguments.\r\n  *\r\n  * @returns {(Function|Object)} Intercepted output piped from source curry method.\r\n  */\n  function transform (parameters) {\n    var inputs;\n    var context;\n\n    let results = () => method.apply(context, inputs);\n    let update = it => context || it;\n    let fetch = it => !ready(it) ? transform(it) : results();\n\n    return callback\n\n    /**\r\n     * Interception layer to revert back to transform if data is missing.\r\n     *\r\n     * @function callback\r\n     *\r\n     * @param {...Array} input - All of the variables to be accepted by method.\r\n     *\r\n     * @returns {Object} Output of the source curry method.\r\n     **/\n    function callback (...input) {\n      var response;\n\n      inputs = combine(parameters, array(arguments));\n      context = update(this);\n      response = fetch(inputs);\n\n      return response\n    }\n  }\n};\n\nmodule.exports = curry;\n"]}