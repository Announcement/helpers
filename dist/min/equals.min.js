'use strict'
function combine (n, r) {
  var t = void 0
  for (n = n.concat([]); (t = n.indexOf(void 0)) !== -1 && r.length > 0;) { n[t] = r.shift() }
  return n.concat(r)
}
function array (n) {
  return Array.prototype.slice.call(n, 0)
}
function empty (n) {
  return void 0 === n || n === null
}
function curry (n) {
  function r (t) {
    function o () {
      for (var n = arguments.length, r = Array(n), o = 0; o < n; o++) { r[o] = arguments[o] }
      return u = combine(t, array(arguments)), i = f(this), a(u)
    }
    var u,
      i,
      c = function () {
        return n.apply(i, u)
      },
      f = function (n) {
        return i || n
      },
      a = function (n) {
        return e(n) ? c() : r(n)
      }
    return o
  }
  var t = function (r) {
      return r.length < n.length
    },
    o = function (n) {
      return n.some(empty)
    },
    e = function (n) {
      return t(n) && !o(n)
    }
  return n.length <= 1 ? n : r([])
}
function pair (n) {
  return Object.keys(n).map(function (r) {
    return { key: r, value: n[r] }
  })
}
function flatten (n) {
  var r = void 0, t = void 0, o = void 0
  for (r = function (n) {
    return n.constructor === Array
  }, t = function (n) {
    return r(n) ? n : [ n ]
  }, o = function (n, r) {
    return n.concat(r)
  }; n.some(r);) { n = n.map(t).reduce(o) }
  return n
}
function similar (n, r) {
  var t = void 0
  return t = n.constructor === r.constructor, (void 0 === n
    ? 'undefined'
    : _typeof(n)) ===
    (void 0 === r ? 'undefined' : _typeof(r)) &&
    t
}
function equals (n, r) {
  return similar(n, r) && identical(n, r)
}
function identical (n, r) {
  var t = function (t) {
    return has(n)(t.key) && has(r)(t.key) && equals(n[t.key], r[t.key])
  }
  return n.constructor !== Object
    ? n === r
    : flatten([ pair(n), pair(r) ]).every(t)
}
var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
  ? function (n) {
    return typeof n
  }
  : function (n) {
    return n && typeof Symbol === 'function' && n.constructor === Symbol &&
      n !== Symbol.prototype
      ? 'symbol'
      : typeof n
  },
  has = curry(function (n, r) {
    return n.hasOwnProperty(r)
  })
module.exports = equals
// # sourceMappingURL=../map/equals.min.js.map
