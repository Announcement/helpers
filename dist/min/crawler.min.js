'use strict';
function _classCallCheck(r, t) {
  if (!(r instanceof t))
    throw new TypeError('Cannot call a class as a function');
}
function first(r, t) {
  var n, e;
  return r.find(function(r, o, a) {
    return n = r, e = t(r, o, a);
  }), { input: n, output: e };
}
function decompose(r, t) {
  var n = first(r, function(r) {
    return r.test(t);
  });
  return console.log(n), n ? n.input.unit(t) : t;
}
var _createClass = function() {
  function r(r, t) {
    for (var n = 0; n < t.length; n++) {
      var e = t[n];
      e.enumerable = e.enumerable || !1, e.configurable = !0, 'value' in e &&
        (e.writable = !0), Object.defineProperty(r, e.key, e);
    }
  }
  return function(t, n, e) {
    return n && r(t.prototype, n), e && r(t, e), t;
  };
}(),
  _slicedToArray = function() {
    function r(r, t) {
      var n, e = [], o = !0, a = !1;
      try {
        for (
          var u, i = r[Symbol.iterator]();
          !(o = (u = i.next()).done) && (e.push(u.value), !t || e.length !== t);
          o = !0
        )
          
      } catch (r) {
        a = !0, n = r;
      } finally {
        try {
          !o && i.return && i.return();
        } finally {
          if (a)
            throw n;
        }
      }
      return e;
    }
    return function(t, n) {
      if (Array.isArray(t))
        return t;
      if (Symbol.iterator in Object(t))
        return r(t, n);
      throw new TypeError(
        'Invalid attempt to destructure non-iterable instance',
      );
    };
  }(),
  isArray = function(r) {
    return r.constructor === Array;
  },
  isObject = function(r) {
    return r.constructor === Object;
  },
  map = function(r, t) {
    var n, e = Object.assign({}, r), o = !0, a = !1;
    try {
      for (
        var u, i = e[Symbol.iterator]();
        !(o = (u = i.next()).done);
        o = !0
      ) {
        var c = u.value, s = _slicedToArray(c, 2), l = s[0], f = s[1];
        e[l] = { input: f, output: t(f, l, r) };
      }
    } catch (r) {
      a = !0, n = r;
    } finally {
      try {
        !o && i.return && i.return();
      } finally {
        if (a)
          throw n;
      }
    }
    return e;
  },
  Crawler = function() {
    function r(t) {
      _classCallCheck(this, r), this.method = t, this.cache = [];
    }
    return _createClass(r, [
      {
        key: 'unique',
        value: function(r) {
          var t = this.cache;
          return -1 === t.indexOf(r) && (t.push(r), !0);
        },
      },
      {
        key: 'flat',
        value: function(r, t) {
          var n = function(r, n, e) {
            var o = t(r, n, e);
            return console.log(o), o;
          },
            e = function(r) {
              var t = map(r)(n);
              return console.log('render processor', t), t;
            };
          return decompose(
            [
              { name: 'array', test: isArray, unit: e },
              { name: 'object', test: isObject, unit: e },
            ],
            r,
          );
        },
      },
      {
        key: 'process',
        value: function(r, t) {
          var n = this,
            e = function(r) {
              return n.flat(r, n.process.bind(n));
            },
            o = decompose(
              [
                { name: 'array', test: isArray, unit: e },
                { name: 'object', test: isObject, unit: e },
              ],
              r,
            );
          return console.log(o), o;
        },
      },
      {
        key: 'descend',
        value: function(r) {
          var t = this.method;
          this.process.bind(this)(r, t);
        },
      },
    ]), r;
  }();
module.exports = Crawler;
//# sourceMappingURL=../map/crawler.min.js.map
