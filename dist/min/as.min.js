'use strict'
function array (t) {
  return Array.prototype.slice.call(t, 0)
}
function pair (t) {
  return Object.keys(t).map(function (r) {
    return { key: r, value: t[r] }
  })
}
function combine (t, r) {
  var n = void 0
  for (t = t.concat([]); (n = t.indexOf(void 0)) !== -1 && r.length > 0;) { t[n] = r.shift() }
  return t.concat(r)
}
function empty (t) {
  return void 0 === t || t === null
}
function curry (t) {
  function r (n) {
    function e () {
      for (var t = arguments.length, r = Array(t), e = 0; e < t; e++) { r[e] = arguments[e] }
      return u = combine(n, array(arguments)), a = i(this), f(u)
    }
    var u,
      a,
      c = function () {
        return t.apply(a, u)
      },
      i = function (t) {
        return a || t
      },
      f = function (t) {
        return o(t) ? c() : r(t)
      }
    return e
  }
  var n = function (r) {
      return r.length < t.length
    },
    e = function (t) {
      return t.some(empty)
    },
    o = function (t) {
      return n(t) && !e(t)
    }
  return t.length <= 1 ? t : r([])
}
function flatten (t) {
  var r = void 0, n = void 0, e = void 0
  for (r = function (t) {
    return t.constructor === Array
  }, n = function (t) {
    return r(t) ? t : [ t ]
  }, e = function (t, r) {
    return t.concat(r)
  }; t.some(r);) { t = t.map(n).reduce(e) }
  return t
}
function single (t) {
  var r
  return r = t.length, r === 1 ? t.shift() : t
}
function attempt (t, r) {
  var n = void 0, e = void 0
  return n = array(arguments).slice(1), e = single(n), t.apply(this, n) || e
}
function decompose (t, r) {
  var n = function (t, r) {
      return attempt(r, t)
    },
    e = function (e) {
      return t.reduce(n, r || e)
    }
  return r ? e(r) : e
}
Object.defineProperty(exports, '__esModule', { value: !0 })
var as = {
  array: array,
  pair: pair,
  method: curry,
  flatten: flatten,
  decomposed: decompose,
  attempt: attempt
}
exports.default = as, exports.array = array, exports.pair = pair, exports.method = curry, exports.flatten = flatten, exports.decomposed = decompose, exports.attempt = attempt
// # sourceMappingURL=../map/as.min.js.map
