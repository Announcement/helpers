'use strict'
function _classCallCheck (n, e) {
  if (!(n instanceof e)) { throw new TypeError('Cannot call a class as a function') }
}
function combine (n, e) {
  var t = void 0
  for (n = n.concat([]); (t = n.indexOf(void 0)) !== -1 && e.length > 0;) { n[t] = e.shift() }
  return n.concat(e)
}
function array (n) {
  return Array.prototype.slice.call(n, 0)
}
function empty (n) {
  return void 0 === n || n === null
}
function curry (n) {
  function e (t) {
    function r () {
      for (var n = arguments.length, e = Array(n), r = 0; r < n; r++) { e[r] = arguments[r] }
      return o = combine(t, array(arguments)), i = a(this), f(o)
    }
    var o,
      i,
      c = function () {
        return n.apply(i, o)
      },
      a = function (n) {
        return i || n
      },
      f = function (n) {
        return u(n) ? c() : e(n)
      }
    return r
  }
  var t = function (e) {
      return e.length < n.length
    },
    r = function (n) {
      return n.some(empty)
    },
    u = function (n) {
      return t(n) && !r(n)
    }
  return n.length <= 1 ? n : e([])
}
function pair (n) {
  return Object.keys(n).map(function (e) {
    return { key: e, value: n[e] }
  })
}
function flatten (n) {
  var e = void 0, t = void 0, r = void 0
  for (e = function (n) {
    return n.constructor === Array
  }, t = function (n) {
    return e(n) ? n : [ n ]
  }, r = function (n, e) {
    return n.concat(e)
  }; n.some(e);) { n = n.map(t).reduce(r) }
  return n
}
function similar (n, e) {
  var t = void 0
  return t = n.constructor === e.constructor, (void 0 === n
    ? 'undefined'
    : _typeof(n)) ===
    (void 0 === e ? 'undefined' : _typeof(e)) &&
    t
}
function equals (n, e) {
  return similar(n, e) && identical(n, e)
}
function identical (n, e) {
  var t = function (t) {
    return has(n)(t.key) && has(e)(t.key) && equals(n[t.key], e[t.key])
  }
  return n.constructor !== Object
    ? n === e
    : flatten([ pair(n), pair(e) ]).every(t)
}
function exists (n) {
  return void 0 !== n && n !== null
}
var _createClass = (function () {
    function n (n, e) {
      for (var t = 0; t < e.length; t++) {
        var r = e[t]
        r.enumerable = r.enumerable || !1, r.configurable = !0, 'value' in r &&
        (r.writable = !0), Object.defineProperty(n, r.key, r)
      }
    }
    return function (e, t, r) {
      return t && n(e.prototype, t), r && n(e, r), e
    }
  }()),
  _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
    ? function (n) {
      return typeof n
    }
    : function (n) {
      return n && typeof Symbol === 'function' && n.constructor === Symbol &&
        n !== Symbol.prototype
        ? 'symbol'
        : typeof n
    },
  has = curry(function (n, e) {
    return n.hasOwnProperty(e)
  }),
  Compare = (function () {
    function n (e) {
      var t = !(arguments.length > 1 && void 0 !== arguments[1]) ||
        arguments[1]
      _classCallCheck(this, n), this.reference = e, this.polarity = t
    }
    return _createClass(
      n,
      [
        {
          key: 'element',
          value: function () {
            return n.isElement(this.reference)
          }
        },
        {
          key: 'fragment',
          value: function () {
            return n.isFragment(this.reference)
          }
        },
        {
          key: 'text',
          value: function () {
            return n.isText(this.reference)
          }
        },
        {
          key: 'equal',
          value: function (e) {
            return n.isEqual(this.reference, e)
          }
        },
        {
          key: 'existant',
          value: function () {
            return n.isExistant(this.reference)
          }
        },
        {
          key: 'not',
          get: function () {
            return new n(this.reference, !this.polarity)
          }
        }
      ],
      [
        {
          key: 'isElement',
          value: function (n) {
            return n instanceof Element
          }
        },
        {
          key: 'isFragment',
          value: function (n) {
            return n.constructor === DocumentFragment
          }
        },
        {
          key: 'isText',
          value: function (n) {
            return n.constructor === Text
          }
        },
        {
          key: 'isEqual',
          value: function (n, e) {
            return equals(n, e)
          }
        },
        {
          key: 'isExistant',
          value: function (n) {
            return exists(n)
          }
        }
      ]
    ), n
  }())
module.exports = Compare
// # sourceMappingURL=../map/Compare.min.js.map
