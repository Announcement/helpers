'use strict'
function combine (r, n) {
  var e = void 0
  for (r = r.concat([]); (e = r.indexOf(void 0)) !== -1 && n.length > 0;) { r[e] = n.shift() }
  return r.concat(n)
}
function array (r) {
  return Array.prototype.slice.call(r, 0)
}
function empty (r) {
  return void 0 === r || r === null
}
function curry (r) {
  function n (e) {
    function t () {
      for (var r = arguments.length, n = Array(r), t = 0; t < r; t++) { n[t] = arguments[t] }
      return o = combine(e, array(arguments)), c = f(this), a(o)
    }
    var o,
      c,
      i = function () {
        return r.apply(c, o)
      },
      f = function (r) {
        return c || r
      },
      a = function (r) {
        return u(r) ? i() : n(r)
      }
    return t
  }
  var e = function (n) {
      return n.length < r.length
    },
    t = function (r) {
      return r.some(empty)
    },
    u = function (r) {
      return e(r) && !t(r)
    }
  return r.length <= 1 ? r : n([])
}
function where (r, n) {
  var e,
    t = function (e) {
      return r[e] === n[e]
    }
  return e = Object.keys(r), e.every(t)
}
function select () {
  function r (r, n) {
    return f.indexOf(n) !== -1 ? r[n] : [ r[n] ]
  }
  function n (n) {
    for (var e in n) { n[e] = r(n, e) }
    return n
  }
  function e (r) {
    return isArray(r) ? r : [ n(r) ]
  }
  function t (r) {
    var n,
      e = function (e) {
        n[e] = r[e]
      }
    return n = {}, f.forEach(e), n
  }
  function u (r, n) {
    var e,
      t = function (n) {
        r[n] = r[n] || []
      },
      u = function (e) {
        r[e] = r[e].concat(n[e])
      },
      o = function (r) {
        return f.indexOf(r) === -1
      }
    return (e = Object.keys(n).filter(o)).forEach(t), e.forEach(u), r
  }
  function o (r, n) {
    var e, o, c
    return o = t(n), c = _where(o), e = r.findIndex(c), e !== -1
      ? r[e] = u(r[e], n)
      : r.push(n), r
  }
  function c (r, t) {
    var u, c
    return u = e(r), c = n(t), u = o(u, c)
  }
  for (var i = arguments.length, f = Array(i), a = 0; a < i; a++) { f[a] = arguments[a] }
  return c
}
function beforeReduce (r) {
  return r instanceof Array ? r : [ r ]
}
Object.defineProperty(exports, '__esModule', { value: !0 })
var _where = curry(where),
  isArray = function (r) {
    return r instanceof Array
  },
  unique = {
    normal: curry(function (r, n) {
      return r.filter(_where(n)).length > 1
    }),
    filter: function (r, n, e) {
      return e.indexOf(r, n + 1) === -1
    },
    reduce: function (r, n) {
      return (r = beforeReduce(r)).find(_where(n)) || r.push(n), r
    }
  }
exports.where = _where, exports.select = select, exports.unique = unique
// # sourceMappingURL=../map/query.min.js.map
