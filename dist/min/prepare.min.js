'use strict'
function array (n) {
  return Array.prototype.slice.call(n, 0)
}
function single (n) {
  var t
  return t = n.length, t === 1 ? n.shift() : n
}
function attempt (n, t) {
  var r = void 0, e = void 0
  return r = array(arguments).slice(1), e = single(r), n.apply(this, r) || e
}
function inject (n, t) {
  var r = {}
  for (var e in n) {
    r[e] = (function (n, e) {
      return [
        function () {
          return e === r && !1
        },
        function () {
          return e === 'function' && attempt(t, e)
        },
        function () {
          return e === 'object' && inject(e, t)
        }
      ].find(function (n) {
        return n()
      })() || e
    }(e, n[e]))
  }
  return r
}
function combine (n, t) {
  var r = void 0
  for (n = n.concat([]); (r = n.indexOf(void 0)) !== -1 && t.length > 0;) { n[r] = t.shift() }
  return n.concat(t)
}
function empty (n) {
  return void 0 === n || n === null
}
function curry (n) {
  function t (r) {
    function e () {
      for (var n = arguments.length, t = Array(n), e = 0; e < n; e++) { t[e] = arguments[e] }
      return i = combine(r, array(arguments)), o = f(this), a(i)
    }
    var i,
      o,
      c = function () {
        return n.apply(o, i)
      },
      f = function (n) {
        return o || n
      },
      a = function (n) {
        return u(n) ? c() : t(n)
      }
    return e
  }
  var r = function (t) {
      return t.length < n.length
    },
    e = function (n) {
      return n.some(empty)
    },
    u = function (n) {
      return r(n) && !e(n)
    }
  return n.length <= 1 ? n : t([])
}
function negated (n) {
  return function () {
    return !n.apply(this, arguments)
  }
}
function prepare (n) {
  var t = void 0, r = void 0
  return t = inject(n, negated), t = inject(t, curry), r = inject(
    n,
    curry
  ), r.not = t, r
}
module.exports = prepare
// # sourceMappingURL=../map/prepare.min.js.map
