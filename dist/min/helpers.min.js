'use strict'
function combine (n, e) {
  var t = void 0
  for (n = n.concat([]); (t = n.indexOf(void 0)) !== -1 && e.length > 0;) { n[t] = e.shift() }
  return n.concat(e)
}
function array (n) {
  return Array.prototype.slice.call(n, 0)
}
function empty (n) {
  return void 0 === n || n === null
}
function curry (n) {
  function e (t) {
    function r () {
      for (var n = arguments.length, e = Array(n), r = 0; r < n; r++) { e[r] = arguments[r] }
      return o = combine(t, array(arguments)), i = f(this), a(o)
    }
    var o,
      i,
      c = function () {
        return n.apply(i, o)
      },
      f = function (n) {
        return i || n
      },
      a = function (n) {
        return u(n) ? c() : e(n)
      }
    return r
  }
  var t = function (e) {
      return e.length < n.length
    },
    r = function (n) {
      return n.some(empty)
    },
    u = function (n) {
      return t(n) && !r(n)
    }
  return n.length <= 1 ? n : e([])
}
function pair (n) {
  return Object.keys(n).map(function (e) {
    return { key: e, value: n[e] }
  })
}
function flatten (n) {
  var e = void 0, t = void 0, r = void 0
  for (e = function (n) {
    return n.constructor === Array
  }, t = function (n) {
    return e(n) ? n : [ n ]
  }, r = function (n, e) {
    return n.concat(e)
  }; n.some(e);) { n = n.map(t).reduce(r) }
  return n
}
function similar (n, e) {
  var t = void 0
  return t = n.constructor === e.constructor, (void 0 === n
    ? 'undefined'
    : _typeof(n)) ===
    (void 0 === e ? 'undefined' : _typeof(e)) &&
    t
}
function equals (n, e) {
  return similar(n, e) && identical(n, e)
}
function identical (n, e) {
  var t = function (t) {
    return has(n)(t.key) && has(e)(t.key) && equals(n[t.key], e[t.key])
  }
  return n.constructor !== Object
    ? n === e
    : flatten([ pair(n), pair(e) ]).every(t)
}
function exists (n) {
  return void 0 !== n && n !== null
}
function single (n) {
  var e
  return e = n.length, e === 1 ? n.shift() : n
}
function attempt (n, e) {
  var t = void 0, r = void 0
  return t = array(arguments).slice(1), r = single(t), n.apply(this, t) || r
}
function inject (n, e) {
  var t = {}
  for (var r in n) {
    t[r] = (function (n, r) {
      return [
        function () {
          return r === t && !1
        },
        function () {
          return r === 'function' && attempt(e, r)
        },
        function () {
          return r === 'object' && inject(r, e)
        }
      ].find(function (n) {
        return n()
      })() || r
    }(r, n[r]))
  }
  return t
}
function negated (n) {
  return function () {
    return !n.apply(this, arguments)
  }
}
function prepare (n) {
  var e = void 0, t = void 0
  return e = inject(n, negated), e = inject(e, curry), t = inject(
    n,
    curry
  ), t.not = e, t
}
function inside (n, e) {
  var t = function (n) {
      return function (e) {
        return n[e]
      }
    },
    r = function (n) {
      return n instanceof Array
    },
    u = function (n) {
      return (void 0 === n ? 'undefined' : _typeof(n)) === 'object'
    },
    o = function (n) {
      return Object.keys(n).map(t(n))
    },
    i = function (n) {
      return inside(n, e)
    },
    c = function () {
      return n.some(i)
    },
    f = function () {
      return o(n).some(i)
    },
    a = function () {
      return r(n) && c()
    },
    s = function () {
      return u(n) && f()
    }
  return (function () {
    return n === e
  }()) || (function () {
    return a() || s()
  }())
}
function decompose (n, e) {
  var t = function (n, e) {
      return attempt(e, n)
    },
    r = function (r) {
      return n.reduce(t, e || r)
    }
  return e ? r(e) : r
}
function where (n, e) {
  var t,
    r = function (t) {
      return n[t] === e[t]
    }
  return t = Object.keys(n), t.every(r)
}
function select () {
  function n (n, e) {
    return f.indexOf(e) !== -1 ? n[e] : [ n[e] ]
  }
  function e (e) {
    for (var t in e) { e[t] = n(e, t) }
    return e
  }
  function t (n) {
    return isArray(n) ? n : [ e(n) ]
  }
  function r (n) {
    var e,
      t = function (t) {
        e[t] = n[t]
      }
    return e = {}, f.forEach(t), e
  }
  function u (n, e) {
    var t,
      r = function (e) {
        n[e] = n[e] || []
      },
      u = function (t) {
        n[t] = n[t].concat(e[t])
      },
      o = function (n) {
        return f.indexOf(n) === -1
      }
    return (t = Object.keys(e).filter(o)).forEach(r), t.forEach(u), n
  }
  function o (n, e) {
    var t, o, i
    return o = r(e), i = _where(o), t = n.findIndex(i), t !== -1
      ? n[t] = u(n[t], e)
      : n.push(e), n
  }
  function i (n, r) {
    var u, i
    return u = t(n), i = e(r), u = o(u, i)
  }
  for (var c = arguments.length, f = Array(c), a = 0; a < c; a++) { f[a] = arguments[a] }
  return i
}
function beforeReduce (n) {
  return n instanceof Array ? n : [ n ]
}
var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
  ? function (n) {
    return typeof n
  }
  : function (n) {
    return n && typeof Symbol === 'function' && n.constructor === Symbol &&
      n !== Symbol.prototype
      ? 'symbol'
      : typeof n
  }
Object.defineProperty(exports, '__esModule', { value: !0 })
var has = curry(function (n, e) {
    return n.hasOwnProperty(e)
  }),
  element = function (n) {
    return n.nodeType === document.ELEMENT_NODE
  },
  fragment = function (n) {
    return n.nodeType === document.DOCUMENT_FRAGMENT_NODE
  },
  text = function (n) {
    return n.nodeType === document.TEXT_NODE
  },
  is = prepare({
    element: element,
    fragment: fragment,
    text: text,
    inside: inside,
    equal: equals,
    existent: exists
  }),
  is$1 = Object.freeze({
    default: is,
    element: element,
    fragment: fragment,
    text: text,
    equal: equals,
    existent: exists
  }),
  as = {
    array: array,
    pair: pair,
    method: curry,
    flatten: flatten,
    decomposed: decompose,
    attempt: attempt
  },
  as$1 = Object.freeze({
    default: as,
    array: array,
    pair: pair,
    method: curry,
    flatten: flatten,
    decomposed: decompose,
    attempt: attempt
  }),
  _where = curry(where),
  isArray = function (n) {
    return n instanceof Array
  },
  unique = {
    normal: curry(function (n, e) {
      return n.filter(_where(e)).length > 1
    }),
    filter: function (n, e, t) {
      return t.indexOf(n, e + 1) === -1
    },
    reduce: function (n, e) {
      return (n = beforeReduce(n)).find(_where(e)) || n.push(e), n
    }
  },
  query = Object.freeze({ where: _where, select: select, unique: unique }),
  are = is$1
exports.is = is$1, exports.are = are, exports.as = as$1, exports.query = query
// # sourceMappingURL=../map/helpers.min.js.map
