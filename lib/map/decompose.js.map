{"version":3,"sources":["decompose.js"],"names":["array","initial","composer","previous","current","reducer","it","reduce"],"mappings":";;;;;;kBAgBe,UAAUA,KAAV,EAAiBC,OAAjB,EAA0B;AACvC,MAAIC,WAAW,CAACC,QAAD,EAAWC,OAAX,KAAuB,uBAAQA,OAAR,EAAiBD,QAAjB,CAAtC;AACA,MAAIE,UAAUC,MAAMN,MAAMO,MAAN,CAAaL,QAAb,EAAuBD,WAAWK,EAAlC,CAApB;;AAEA,SAAOL,UAAUI,QAAQJ,OAAR,CAAV,GAA6BI,OAApC;AACD,C;;AArBD","file":"../decompose.js","sourcesContent":["import attempt from './attempt'\n\n/**\r\n * Applies functions to a value and moves down the chain if possible.\r\n *\r\n * @function decompose\r\n *\r\n * @see exists\r\n * @see attempt\r\n * @see array\r\n *\r\n * @param {Array} array - List of functions to be applied.\r\n * @param {Object} initial - Optional initial item.\r\n *\r\n * @returns {Object} Mutated version of the initial value.\r\n */\nexport default function (array, initial) {\n  let composer = (previous, current) => attempt(current, previous)\n  let reducer = it => array.reduce(composer, initial || it)\n\n  return initial ? reducer(initial) : reducer\n}\n"]}