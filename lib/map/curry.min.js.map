{"version":3,"sources":["curry.js"],"names":["curry","method","transform","params","callback","input","inputs","_combine2","default","_array2","arguments","context","update","this","fetch","results","apply","it","ready","enough","length","missing","some","_empty2","_combine","require","_array","_empty"],"mappings":"qFAaA,SAASA,MAAOC,GAkBd,SAASC,EAAWC,GAkBlB,SAASC,KAAaC,GAOpB,OAJAC,GAAS,EAAAC,UAAAC,SAAQL,GAAQ,EAAAM,QAAAD,SAAME,YAC/BC,EAAUC,EAAOC,MACNC,EAAMR,GAtBnB,IAAIA,EACAK,EAEJ,IAAII,EAAU,IAAMd,EAAOe,MAAML,EAASL,GACtCM,EAASK,GAAMN,GAAWM,EAC1BH,EAAQG,GAAOC,EAAMD,GAAsBF,IAAhBb,EAAUe,GAEzC,OAAOb,EAzBT,IAAIe,EAASd,GAASA,EAAMe,OAASnB,EAAOmB,OACxCC,EAAUhB,GAASA,EAAMiB,KAANC,QAAAf,SACnBU,EAAQD,GAAME,EAAOF,KAAQI,EAAQJ,GAEzC,OAAOhB,EAAOmB,QAAU,EAAInB,EAASC,oFAlBvC,IAAAsB,SAAAC,QAAA,wDACAC,OAAAD,QAAA,kDACAE,OAAAF,QAAA,0DA2DkBjB,QAATR","file":"../lib/curry.min.js","sourcesContent":["import combine from './combine'\r\nimport array from './array'\r\nimport empty from './empty'\r\n\r\n/**\r\n * Returns a modified function with lazy option assocations\r\n *\r\n * @function curry\r\n *\r\n * @param {Function} method - function to be curried\r\n *\r\n * @return {Function} curried functions\r\n */\r\nfunction curry (method) {\r\n  let enough = input => input.length < method.length\r\n  let missing = input => input.some(empty)\r\n  let ready = it => enough(it) && !missing(it)\r\n\r\n  return method.length <= 1 ? method : transform([])\r\n\r\n  /**\r\n  * Generated method through currying, allowing chainibility\r\n  * @function transform\r\n  *\r\n  * @see combine\r\n  * @this\r\n  *\r\n  * @param {Array} params - arguments array\r\n  *\r\n  * @return {(Function|Object)} intercepted output piped from source curry method\r\n  */\r\n  function transform (params) {\r\n    var inputs\r\n    var context\r\n\r\n    let results = () => method.apply(context, inputs)\r\n    let update = it => context || it\r\n    let fetch = it => !ready(it) ? transform(it) : results()\r\n\r\n    return callback\r\n\r\n    /**\r\n     * Interception layer to revert back to transform if data is missing\r\n     * @function callback\r\n     *\r\n     * @param {Array} input - all of the variables to be accepted by method\r\n     *\r\n     * @returns {Object} piped output from source curry method\r\n     **/\r\n    function callback (...input) {\r\n      var response\r\n\r\n      inputs = combine(params, array(arguments))\r\n      context = update(this)\r\n      response = fetch(inputs)\r\n\r\n      return response\r\n    }\r\n  }\r\n}\r\n\r\nexport { curry as default }\r\n"]}