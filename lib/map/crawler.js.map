{"version":3,"sources":["crawler.js"],"names":["isArray","it","constructor","Array","isObject","Object","map","callback","object","assign","key","value","input","output","decompose","processors","each","test","item","console","log","unit","Crawler","method","cache","unique","indexOf","push","flat","render","response","genericProcessor","result","name","process","bind","descend","default"],"mappings":"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","file":"../crawler.js","sourcesContent":["// import exists from './exists'\nimport first from './first'\n// import {forEach} from './loop'\nlet isArray = it => it.constructor === Array\nlet isObject = it => it.constructor === Object\n\nlet map = (it, callback) => {\n  const object = Object.assign({}, it)\n\n  for (let [ key, value ] of object) {\n    object[key] = { input: value, output: callback(value, key, it) }\n  }\n\n  return object\n}\n\nfunction decompose (processors, input) {\n  let each = it => it.test(input)\n  let item = first(processors, each)\n\n  console.log(item)\n\n  return !item ? input : item.input.unit(input)\n}\n\nclass Crawler {\n  constructor (method) {\n    this.method = method\n    this.cache = []\n  }\n\n  unique (value) {\n    let cache = this.cache\n\n    if (cache.indexOf(value) !== -1) {\n      return false\n    }\n\n    cache.push(value)\n    return true\n  }\n\n  flat (it, callback) {\n    // const unique = this.unique.bind(this)\n    let render = (value, key, object) => {\n      let response = callback(value, key, object)\n      console.log(response)\n      return response\n      // results.push(result)?\n    }\n\n    let genericProcessor = it => {\n      let result = map(it)(render)\n      console.log('render processor', result)\n      return result\n    }\n\n    let processors = [\n      { name: 'array', test: isArray, unit: genericProcessor },\n      { name: 'object', test: isObject, unit: genericProcessor }\n    ]\n\n    let response = decompose(processors, it)\n    return response\n  }\n\n  process (object, callback) {\n    let genericProcessor = it => {\n      return this.flat(it, this.process.bind(this))\n    }\n\n    let processors = [\n      { name: 'array', test: isArray, unit: genericProcessor },\n      { name: 'object', test: isObject, unit: genericProcessor }\n    ]\n\n    let response = decompose(processors, object)\n\n    console.log(response)\n\n    return response\n  }\n\n  descend (it) {\n    const method = this.method\n    const process = this.process.bind(this)\n\n    process(it, method)\n  }\n}\n\nexport { Crawler as default }\n"]}