{"version":3,"sources":["inside.js"],"names":["inside","haystack","needle","toValues","object","key","isArray","it","Array","isObject","values","Object","keys","map","areInside","insideArray","some","insideObject","array","search","default"],"mappings":"aASA,SAASA,OAAQC,EAAUC,GACzB,IAAIC,EAAWC,GAAUC,GAAOD,EAAOC,GACnCC,EAAUC,GAAMA,aAAcC,MAC9BC,EAAWF,GAAoB,iBAAPA,EACxBG,EAASH,GAAMI,OAAOC,KAAKL,GAAIM,IAAIV,EAASI,IAE5CO,EAAYP,GAAMP,OAAOO,EAAIL,GAE7Ba,EAAc,IAAMd,EAASe,KAAKF,GAClCG,EAAe,IAAMP,EAAOT,GAAUe,KAAKF,GAE3CI,EAAQ,IAAMZ,EAAQL,IAAac,EAAYd,EAAUC,GACzDE,EAAS,IAAMK,EAASR,IAAagB,EAAahB,EAAUC,GAE5DiB,EAAS,IAAMD,KAAWd,IAE9B,MAHc,KAAMH,IAAaC,MAGbiB,mEAGJC,QAAVpB","file":"../lib/inside.min.js","sourcesContent":["/**\r\n * Detects if the needle is in the haystack.\r\n * @function inside\r\n *\r\n * @param {Object|Array} haystack - what we are looking in\r\n * @param {Object} needle - strict equal comparison compatible\r\n *\r\n * @return {Boolean} Whether or not the value could be located\r\n */\r\nfunction inside (haystack, needle) {\r\n  let toValues = object => key => object[key]\r\n  let isArray = it => it instanceof Array\r\n  let isObject = it => typeof it === 'object'\r\n  let values = it => Object.keys(it).map(toValues(it))\r\n\r\n  let areInside = it => inside(it, needle)\r\n\r\n  let insideArray = () => haystack.some(areInside)\r\n  let insideObject = () => values(haystack).some(areInside)\r\n\r\n  let array = () => isArray(haystack) && insideArray(haystack, needle)\r\n  let object = () => isObject(haystack) && insideObject(haystack, needle)\r\n  let matches = () => haystack === needle\r\n  let search = () => array() || object()\r\n\r\n  return matches() || search()\r\n}\r\n\r\nexport {inside as default}\r\n"]}