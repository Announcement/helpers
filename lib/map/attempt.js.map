{"version":3,"sources":["attempt.js"],"names":["mutation","subject","parameters","result","apply","method","valid","it","arguments","slice"],"mappings":";;;;;;kBAkBe,UAAUA,QAAV,EAAoBC,OAApB,EAA6B;AAC1C,MAAIC,UAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAIC,QAAQ,CAACC,MAAD,EAASH,UAAT,KAAwBG,OAAOD,KAAP,CAAa,IAAb,EAAmBF,UAAnB,CAApC;AACA,MAAII,QAAQC,MAAM,sBAAOA,EAAP,KAAc,sBAAOA,EAAP,CAAhC;;AAEAL,eAAa,qBAAMM,SAAN,EAAiBC,KAAjB,CAAuB,CAAvB,CAAb;AACAN,WAASC,MAAMJ,QAAN,EAAgBE,UAAhB,CAAT;;AAEA,SAAOI,MAAMH,MAAN,KAAiBG,MAAMJ,UAAN,CAAxB;AACD,C;;AA7BD;;;;AACA;;;;AACA","file":"../attempt.js","sourcesContent":["import array from './array'\nimport single from './single'\nimport exists from './exists'\n\n/**\r\n * Attempts to apply mutation to subject.\r\n *\r\n * @function attempt\r\n *\r\n * @see array\r\n * @see single\r\n * @see exists\r\n *\r\n * @param {Function} mutation - Mutator function to be called on the subject.\r\n * @param {Object} subject - Any input that should be mutated.\r\n *\r\n * @returns {Object} Subject unless mutation can be applied.\r\n */\nexport default function (mutation, subject) {\n  var parameters\n  var result\n\n  let apply = (method, parameters) => method.apply(this, parameters)\n  let valid = it => exists(it) && single(it)\n\n  parameters = array(arguments).slice(1)\n  result = apply(mutation, parameters)\n\n  return valid(result) || valid(parameters)\n}\n"]}