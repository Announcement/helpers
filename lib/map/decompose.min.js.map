{"version":3,"sources":["decompose.js"],"names":["decompose","array","initial","composer","previous","current","_attempt2","default","reducer","it","reduce","_attempt","require"],"mappings":"qFAgBA,SAASA,UAAWC,EAAOC,GACzB,IAAIC,EAAW,CAACC,EAAUC,KAAY,EAAAC,UAAAC,SAAQF,EAASD,GACnDI,EAAWC,GAAOR,EAAMS,OAAOP,EAAUD,GAAWO,GAExD,OAAOP,EAAUM,EAAQN,GAAWM,gFApBtC,IAAAG,SAAAC,QAAA,gEAuBqBL,QAAbP","file":"../lib/decompose.min.js","sourcesContent":["import attempt from './attempt'\r\n\r\n/**\r\n * Applies functions to a value and moves down the chain if possible\r\n *\r\n * @function decompose\r\n *\r\n * @see exists\r\n * @see attempt\r\n * @see array$\r\n *\r\n * @param {Array} array - list of functions to be applied\r\n * @param {Object} initial - optional initial item\r\n *\r\n * @return Object\r\n */\r\nfunction decompose (array, initial) {\r\n  let composer = (previous, current) => attempt(current, previous)\r\n  let reducer = (it) => array.reduce(composer, initial || it)\r\n\r\n  return initial ? reducer(initial) : reducer\r\n}\r\n\r\nexport {decompose as default}\r\n"]}