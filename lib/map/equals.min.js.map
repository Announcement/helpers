{"version":3,"sources":["equals.js"],"names":["equals","reference","object","_similar2","default","identical","every","item","_has2","key","constructor","Object","_flatten2","_pair2","_has","require","_pair","_flatten","_similar"],"mappings":"qFAkBA,SAASA,OAAQC,EAAWC,GAC1B,OAAO,EAAAC,UAAAC,SAAQH,EAAWC,IAAWG,UAAUJ,EAAWC,GAY5D,SAASG,UAAWJ,EAAWC,GAC7B,IAAII,EAAQC,IACV,EAAAC,MAAAJ,SAAIH,GAAWM,EAAKE,OACpB,EAAAD,MAAAJ,SAAIF,GAAQK,EAAKE,MACjBT,OAAOC,EAAUM,EAAKE,KAAMP,EAAOK,EAAKE,MAG1C,OAAIR,EAAUS,cAAgBC,OACrBV,IAAcC,GAGhB,EAAAU,UAAAR,WAAS,EAAAS,OAAAT,SAAKH,IAAY,EAAAY,OAAAT,SAAKF,KAAUI,MAAMA,iFA1CxD,IAAAQ,KAAAC,QAAA,4CACAC,MAAAD,QAAA,+CACAE,SAAAF,QAAA,wDACAG,SAAAH,QAAA,gEA0CkBX,QAAVJ","file":"../lib/equals.min.js","sourcesContent":["import has from './has'\r\nimport pair from './pair'\r\nimport flatten from './flatten'\r\nimport similar from './similar'\r\n\r\n/**\r\n * Compares reference object to another object\r\n *\r\n * @function equals\r\n *\r\n * @see has\r\n * @see pair\r\n *\r\n * @param {Object} reference - what should be compared to\r\n * @param {Object} object - what we are comparing\r\n *\r\n * @return {boolean}\r\n */\r\nfunction equals (reference, object) {\r\n  return similar(reference, object) && identical(reference, object)\r\n}\r\n\r\n/**\r\n * Checks to see if two items of the same type and class are the same\r\n * @param identical\r\n *\r\n * @param {object} reference - what is being compared to\r\n * @param {object} object - what is being compared\r\n *\r\n * @return {boolean}\r\n */\r\nfunction identical (reference, object) {\r\n  let every = item =>\r\n    has(reference)(item.key) &&\r\n    has(object)(item.key) &&\r\n    equals(reference[item.key], object[item.key])\r\n\r\n  // avoid unnecissary recursion\r\n  if (reference.constructor !== Object) {\r\n    return reference === object\r\n  }\r\n\r\n  return flatten([pair(reference), pair(object)]).every(every)\r\n}\r\n\r\nexport {equals as default}\r\n"]}