{"version":3,"sources":["select.js"],"names":["select","it","params","arguments","isArray","Array","compliant","key","indexOf","prepare","normalize","pull","item","response","forEach","param","merge","reference","object","keys","ensure","concat","listed","Object","filter","append","array","index","query","search","findIndex","push","reducer","previous","current"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAYA,SAASA,MAAT,CAAiBC,EAAjB,EAAqB;AACnB,MAAIC,SAAS,uBAAQD,EAAR,EAAY,qBAAME,SAAN,CAAZ,CAAb;AACA,MAAIC,UAAUH,MAAMA,cAAcI,KAAlC;;AAEA,WAASC,SAAT,CAAoBL,EAApB,EAAwBM,GAAxB,EAA6B;AAC3B,WAAOL,OAAOM,OAAP,CAAeD,GAAf,MAAwB,CAAC,CAAzB,GAA6BN,GAAGM,GAAH,CAA7B,GAAuC,CAAEN,GAAGM,GAAH,CAAF,CAA9C;AACD;;AAED,WAASE,OAAT,CAAkBR,EAAlB,EAAsB;AACpB,QAAIM,GAAJ;;AAEA,SAAKA,GAAL,IAAYN,EAAZ,EAAgB;AACdA,SAAGM,GAAH,IAAUD,UAAUL,EAAV,EAAcM,GAAd,CAAV;AACD;;AAED,WAAON,EAAP;AACD;;AAED,WAASS,SAAT,CAAoBT,EAApB,EAAwB;AACtB,QAAI,CAACG,QAAQH,EAAR,CAAL,EAAkB;AAChB,aAAO,CAAEQ,QAAQR,EAAR,CAAF,CAAP;AACD;;AAED,WAAOA,EAAP;AACD;;AAED,WAASU,IAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIC,QAAJ;;AAEA,QAAIC,UAAUC,SAAS;AACrBF,eAASE,KAAT,IAAkBH,KAAKG,KAAL,CAAlB;AACD,KAFD;;AAIAF,eAAW,EAAX;;AAEAX,WAAOY,OAAP,CAAeA,OAAf;;AAEA,WAAOD,QAAP;AACD;;AAED,WAASG,KAAT,CAAgBC,SAAhB,EAA2BC,MAA3B,EAAmC;AACjC,QAAIC,IAAJ;;AAEA,QAAIC,SAASb,OAAO;AAClBU,gBAAUV,GAAV,IAAiBU,UAAUV,GAAV,KAAkB,EAAnC;AACD,KAFD;AAGA,QAAIc,SAASd,OAAO;AAClBU,gBAAUV,GAAV,IAAiBU,UAAUV,GAAV,EAAec,MAAf,CAAsBH,OAAOX,GAAP,CAAtB,CAAjB;AACD,KAFD;AAGA,QAAIe,SAASf,OAAOL,OAAOM,OAAP,CAAeD,GAAf,MAAwB,CAAC,CAA7C;;AAEAY,WAAOI,OAAOJ,IAAP,CAAYD,MAAZ,EAAoBM,MAApB,CAA2BF,MAA3B,CAAP;;AAEAH,SAAKL,OAAL,CAAaM,MAAb;AACAD,SAAKL,OAAL,CAAaO,MAAb;;AAEA,WAAOJ,SAAP;AACD;;AAED,WAASQ,MAAT,CAAiBC,KAAjB,EAAwBd,IAAxB,EAA8B;AAC5B,QAAIe,KAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,MAAJ;;AAEAD,YAAQjB,KAAKC,IAAL,CAAR;AACAiB,aAAS,qBAAMD,KAAN,CAAT;AACAD,YAAQD,MAAMI,SAAN,CAAgBD,MAAhB,CAAR;;AAEA,QAAIF,UAAU,CAAC,CAAf,EAAkB;AAChBD,YAAMC,KAAN,IAAeX,MAAMU,MAAMC,KAAN,CAAN,EAAoBf,IAApB,CAAf;AACD,KAFD,MAEO;AACLc,YAAMK,IAAN,CAAWnB,IAAX;AACD;;AAED,WAAOc,KAAP;AACD;;AAED,WAASM,OAAT,CAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;AACnC,QAAIR,KAAJ;AACA,QAAId,IAAJ;;AAEAc,YAAQhB,UAAUuB,QAAV,CAAR;AACArB,WAAOH,QAAQyB,OAAR,CAAP;;AAEAR,YAAQD,OAAOC,KAAP,EAAcd,IAAd,CAAR;;AAEA,WAAOc,KAAP;AACD;;AAED,SAAOM,OAAP;AACD;;kBAwBchC,M","file":"../select.js","sourcesContent":["import where from './where'\nimport array from './array'\nimport flatten from './flatten'\n\n/**\r\n * Intended to be used with Array.prototype.reduce.\r\n *\r\n * @function select\r\n * @version 3.0.0\r\n *\r\n * @param {...string} it - Property to pull from each object.\r\n *\r\n * @returns {Function} A callback function for reducing objects to similar objects with only specified properties.\r\n */\nfunction select (it) {\n  let params = flatten(it, array(arguments))\n  let isArray = it => it instanceof Array\n\n  function compliant (it, key) {\n    return params.indexOf(key) !== -1 ? it[key] : [ it[key] ]\n  }\n\n  function prepare (it) {\n    var key\n\n    for (key in it) {\n      it[key] = compliant(it, key)\n    }\n\n    return it\n  }\n\n  function normalize (it) {\n    if (!isArray(it)) {\n      return [ prepare(it) ]\n    }\n\n    return it\n  }\n\n  function pull (item) {\n    var response\n\n    let forEach = param => {\n      response[param] = item[param]\n    }\n\n    response = {}\n\n    params.forEach(forEach)\n\n    return response\n  }\n\n  function merge (reference, object) {\n    var keys\n\n    let ensure = key => {\n      reference[key] = reference[key] || []\n    }\n    let concat = key => {\n      reference[key] = reference[key].concat(object[key])\n    }\n    let listed = key => params.indexOf(key) === -1\n\n    keys = Object.keys(object).filter(listed)\n\n    keys.forEach(ensure)\n    keys.forEach(concat)\n\n    return reference\n  }\n\n  function append (array, item) {\n    var index\n    var query\n    var search\n\n    query = pull(item)\n    search = where(query)\n    index = array.findIndex(search)\n\n    if (index !== -1) {\n      array[index] = merge(array[index], item)\n    } else {\n      array.push(item)\n    }\n\n    return array\n  }\n\n  function reducer (previous, current) {\n    var array\n    var item\n\n    array = normalize(previous)\n    item = prepare(current)\n\n    array = append(array, item)\n\n    return array\n  }\n\n  return reducer\n}\n\n// function select2 (...params) {\n//   function pull (item) {\n//     var response\n//\n//     let forEach = param => {\n//       response[param] = item[param]\n//     }\n//\n//     response = {}\n//\n//     params.forEach(forEach)\n//\n//     return response\n//   }\n//\n//   function reducer (previous, current) {\n//     previous = previous instanceof Array ? previous : [pull(previous)]\n//     current = pull(current)\n//     previous.push(current)\n//     return previous\n//   }\n// }\nexport default select\n"]}