{"version":3,"sources":["select.js"],"names":["select","params","compliant","it","key","indexOf","prepare","normalize","isArray","pull","item","response","forEach","param","merge","reference","object","keys","ensure","concat","listed","Object","filter","append","array","index","query","search","_where2","default","findIndex","push","reducer","previous","current","_where","require","Array"],"mappings":"qFAaA,SAASA,UAAWC,GAClB,SAASC,EAAWC,EAAIC,GACtB,OAAgC,IAAzBH,EAAOI,QAAQD,GAAcD,EAAGC,IAAQD,EAAGC,IAGpD,SAASE,EAASH,GAChB,IAAK,IAAIC,KAAOD,EACdA,EAAGC,GAAOF,EAAUC,EAAIC,GAG1B,OAAOD,EAGT,SAASI,EAAWJ,GAClB,OAAKK,QAAQL,GAINA,GAHGG,EAAQH,IAMpB,SAASM,EAAMC,GACb,IAAIC,EAEJ,IAAIC,EAAUC,IACZF,EAASE,GAASH,EAAKG,IAOzB,OAJAF,KAEAV,EAAOW,QAAQA,GAERD,EAGT,SAASG,EAAOC,EAAWC,GACzB,IAAIC,EAEJ,IAAIC,EAASd,IACXW,EAAUX,GAAOW,EAAUX,QAEzBe,EAASf,IACXW,EAAUX,GAAOW,EAAUX,GAAKe,OAAOH,EAAOZ,KAE5CgB,EAAShB,IAAgC,IAAzBH,EAAOI,QAAQD,GAOnC,OALAa,EAAOI,OAAOJ,KAAKD,GAAQM,OAAOF,IAE7BR,QAAQM,GACbD,EAAKL,QAAQO,GAENJ,EAGT,SAASQ,EAAQC,EAAOd,GACtB,IAAIe,EACAC,EACAC,EAYJ,OAVAD,EAAQjB,EAAKC,GACbiB,GAAS,EAAAC,QAAAC,SAAMH,GACfD,EAAQD,EAAMM,UAAUH,IAET,IAAXF,EACFD,EAAMC,GAASX,EAAMU,EAAMC,GAAQf,GAEnCc,EAAMO,KAAKrB,GAGNc,EAGT,SAASQ,EAASC,EAAUC,GAC1B,IAAIV,EACAd,EAOJ,OALAc,EAAQjB,EAAU0B,GAClBvB,EAAOJ,EAAQ4B,GAEfV,EAAQD,EAAOC,EAAOd,GAKxB,OAAOsB,gFAjGT,IAAAG,OAAAC,QAAA,kDAEA,IAAI5B,QAAUL,GAAMA,aAAckC,cAyHfR,QAAV7B","file":"../lib/select.min.js","sourcesContent":["import where from './where'\r\n\r\nlet isArray = it => it instanceof Array\r\n\r\n/**\r\n * intended to be used with Array.prototype.reduce\r\n * @method select\r\n * @version 2.0.0\r\n *\r\n * @param {...string} property - property to pull from each object\r\n *\r\n * @return {function}\r\n */\r\nfunction select (...params) {\r\n  function compliant (it, key) {\r\n    return params.indexOf(key) !== -1 ? it[key] : [it[key]]\r\n  }\r\n\r\n  function prepare (it) {\r\n    for (var key in it) {\r\n      it[key] = compliant(it, key)\r\n    }\r\n\r\n    return it\r\n  }\r\n\r\n  function normalize (it) {\r\n    if (!isArray(it)) {\r\n      return [prepare(it)]\r\n    }\r\n\r\n    return it\r\n  }\r\n\r\n  function pull (item) {\r\n    var response\r\n\r\n    let forEach = param => {\r\n      response[param] = item[param]\r\n    }\r\n\r\n    response = {}\r\n\r\n    params.forEach(forEach)\r\n\r\n    return response\r\n  }\r\n\r\n  function merge (reference, object) {\r\n    var keys\r\n\r\n    let ensure = key => {\r\n      reference[key] = reference[key] || []\r\n    }\r\n    let concat = key => {\r\n      reference[key] = reference[key].concat(object[key])\r\n    }\r\n    let listed = key => params.indexOf(key) === -1\r\n\r\n    keys = Object.keys(object).filter(listed)\r\n\r\n    keys.forEach(ensure)\r\n    keys.forEach(concat)\r\n\r\n    return reference\r\n  }\r\n\r\n  function append (array, item) {\r\n    var index\r\n    var query\r\n    var search\r\n\r\n    query = pull(item)\r\n    search = where(query)\r\n    index = array.findIndex(search)\r\n\r\n    if (index !== -1) {\r\n      array[index] = merge(array[index], item)\r\n    } else {\r\n      array.push(item)\r\n    }\r\n\r\n    return array\r\n  }\r\n\r\n  function reducer (previous, current) {\r\n    var array\r\n    var item\r\n\r\n    array = normalize(previous)\r\n    item = prepare(current)\r\n\r\n    array = append(array, item)\r\n\r\n    return array\r\n  }\r\n\r\n  return reducer\r\n}\r\n\r\n// function select2 (...params) {\r\n//   function pull (item) {\r\n//     var response\r\n//\r\n//     let forEach = param => {\r\n//       response[param] = item[param]\r\n//     }\r\n//\r\n//     response = {}\r\n//\r\n//     params.forEach(forEach)\r\n//\r\n//     return response\r\n//   }\r\n//\r\n//   function reducer (previous, current) {\r\n//     previous = previous instanceof Array ? previous : [pull(previous)]\r\n//     current = pull(current)\r\n//     previous.push(current)\r\n//     return previous\r\n//   }\r\n// }\r\n\r\nexport { select as default }\r\n"]}