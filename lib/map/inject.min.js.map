{"version":3,"sources":["inject.js"],"names":["inject","it","transform","copy","key","value","_attempt2","default","find","_attempt","require"],"mappings":"qFAcA,SAASA,OAAQC,EAAIC,GACnB,IAAIC,KAUJ,IAAK,IAAIC,KAAOH,EAAME,EAAKC,GAR3B,SAAgBA,EAAKC,GAKnB,OAJgB,IAAMA,IAAUF,IAAQ,EAC3B,IAAgB,aAAVE,IAAwB,EAAAC,UAAAC,SAAQL,EAAWG,GACjD,IAAgB,WAAVA,GAAsBL,OAAOK,EAAOH,IAEpBM,KAAKP,GAAMA,QAAWI,GAGnBD,EAAKH,EAAGG,IAEhD,OAAOD,gFA3BT,IAAAM,SAAAC,QAAA,gEA8BkBH,QAAVP","file":"../lib/inject.min.js","sourcesContent":["import attempt from './attempt'\r\n\r\n/**\r\n * Injects a transformer into each element of a collection\r\n *\r\n * @name inject(it, transformer)\r\n *\r\n * @see attempt\r\n *\r\n * @param {Object} it - collection\r\n * @param {Function} tranform - mutator function\r\n *\r\n * @return {Object.<string, Function>}\r\n */\r\nfunction inject (it, transform) {\r\n  let copy = {}\r\n\r\n  function cycle (key, value) {\r\n    let duplicate = () => value === copy && false\r\n    let effort = () => value === 'function' && attempt(transform, value)\r\n    let needle = () => value === 'object' && inject(value, transform)\r\n\r\n    return [duplicate, effort, needle].find(it => it())() || value\r\n  }\r\n\r\n  for (let key in it) { copy[key] = cycle(key, it[key]) }\r\n\r\n  return copy\r\n}\r\n\r\nexport {inject as default}\r\n"]}