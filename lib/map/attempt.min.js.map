{"version":3,"sources":["attempt.js"],"names":["attempt","mutation","subject","parameters","alternative","response","_array2","default","arguments","slice","_single2","apply","this","_array","require","_single"],"mappings":"qFAeA,SAASA,QAASC,EAAUC,GAC1B,IAAIC,EACAC,EACAC,EAOJ,OALAF,GAAa,EAAAG,QAAAC,SAAMC,WAAWC,MAAM,GACpCL,GAAc,EAAAM,SAAAH,SAAOJ,IAErBE,EAAWJ,EAASU,MAAMC,KAAMT,KAEbC,gFAzBrB,IAAAS,OAAAC,QAAA,kDACAC,QAAAD,QAAA,6DA2BmBP,QAAXP","file":"../lib/attempt.min.js","sourcesContent":["import array from './array'\r\nimport single from './single'\r\n\r\n/**\r\n * Attempts to apply mutation to subject, return unmodified on failure\r\n *\r\n * @function attempt\r\n *\r\n * @see array\r\n *\r\n * @param {Function} mutation - mutator function to be called on the subject\r\n * @param {Object} subject - any input that should be mutated\r\n *\r\n * @return {Object}\r\n */\r\nfunction attempt (mutation, subject) {\r\n  let parameters\r\n  let alternative\r\n  let response\r\n\r\n  parameters = array(arguments).slice(1)\r\n  alternative = single(parameters)\r\n\r\n  response = mutation.apply(this, parameters)\r\n\r\n  return response || alternative\r\n}\r\n\r\nexport {attempt as default}\r\n"]}