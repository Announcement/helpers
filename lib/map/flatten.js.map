{"version":3,"sources":["flatten.js"],"names":["flatten","array","arguments","isArray","toArray","fromArray","it","constructor","Array","a","b","concat","some","map","reduce","default"],"mappings":";;;;;;;AAAA;;;;;;AASA,SAASA,OAAT,GAAoB;AAClB,MAAIC,QAAQ,qBAAOC,SAAP,CAAZ;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,SAAJ;;AAEAF,YAAUG,MAAMA,GAAGC,WAAH,KAAmBC,KAAnC;AACAJ,YAAUE,MAAMH,QAAQG,EAAR,IAAcA,EAAd,GAAmB,CAAEA,EAAF,CAAnC;AACAD,cAAY,CAACI,CAAD,EAAIC,CAAJ,KAAUD,EAAEE,MAAF,CAASD,CAAT,CAAtB;;AAEA,SAAOT,MAAMW,IAAN,CAAWT,OAAX,CAAP,EAA4B;AAC1BF,YAAQA,MAAMY,GAAN,CAAUT,OAAV,EAAmBU,MAAnB,CAA0BT,SAA1B,CAAR;AACD;;AAED,SAAOJ,KAAP;AACD;;QAEmBc,O,GAAXf,O","file":"../flatten.js","sourcesContent":["import $array from './array'\n\n/**\r\n * Recursively brings all arguments of arrays to the highest level.\r\n *\r\n * @function flatten\r\n *\r\n * @returns {Array} - Flattened array from the given arguments.\r\n */\nfunction flatten () {\n  let array = $array(arguments)\n  let isArray\n  let toArray\n  let fromArray\n\n  isArray = it => it.constructor === Array\n  toArray = it => isArray(it) ? it : [ it ]\n  fromArray = (a, b) => a.concat(b)\n\n  while (array.some(isArray)) {\n    array = array.map(toArray).reduce(fromArray)\n  }\n\n  return array\n}\n\nexport { flatten as default }\n"]}